CCS PCH C Compiler, Version 4.124, 5967               23-mar-13 10:02

               Filename: E:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used: 288 bytes (1%)
                         Largest free fragment is 32480
               RAM used: 9 (1%) at main() level
                         14 (1%) worst case
               Stack:    1 locations

*
0000:  GOTO   00AE
.................... #include <18F45K20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #fuses H4,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(crystal=15MHz, clock=60MHz) 
*
0020:  CLRF   FEA
0022:  MOVLW  09
0024:  MOVWF  FE9
0026:  MOVF   FEF,W
0028:  BZ    0046
002A:  MOVLW  13
002C:  MOVWF  01
002E:  CLRF   00
0030:  DECFSZ 00,F
0032:  BRA    0030
0034:  DECFSZ 01,F
0036:  BRA    002E
0038:  MOVLW  73
003A:  MOVWF  00
003C:  DECFSZ 00,F
003E:  BRA    003C
0040:  NOP   
0042:  DECFSZ FEF,F
0044:  BRA    002A
0046:  RETURN 0
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use spi(MASTER, DI=PIN_C4, DO=PIN_C5, CLK=PIN_C3, MODE=0,  BAUD=1000000, BITS=16) 
0048:  MOVF   0B,W
004A:  SUBLW  10
004C:  BZ    0058
004E:  MOVWF  0C
0050:  RLCF   09,F
0052:  RLCF   0A,F
0054:  DECFSZ 0C,F
0056:  BRA    0050
0058:  BSF    F94.4
005A:  BCF    F94.5
005C:  BCF    F94.3
005E:  BCF    F8B.3
0060:  MOVFF  0B,0C
0064:  BTFSS  0A.7
0066:  BCF    F8B.5
0068:  BTFSC  0A.7
006A:  BSF    F8B.5
006C:  RLCF   09,F
006E:  RLCF   0A,F
0070:  BSF    F8B.3
0072:  NOP   
0074:  RLCF   01,F
0076:  RLCF   02,F
0078:  BTFSS  F82.4
007A:  BCF    01.0
007C:  BTFSC  F82.4
007E:  BSF    01.0
0080:  BCF    F8B.3
0082:  DECFSZ 0C,F
0084:  BRA    0064
0086:  GOTO   00FE (RETURN)
....................  
.................... #define SLAVE_SELECT PIN_A5 
.................... #include "as5040.h" 
.................... /* 
....................  * as5040.h 
....................  * 
....................  *  Created on: 30/03/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #ifndef AS5040_H_ 
.................... #define AS5040_H_ 
....................  
.................... #define clockwise 0x0000 
.................... #define couter_clockwise 0x8000 
.................... #define direction_mask 0x8000 
.................... #define zero_mask 0x7FE0 
.................... #define index1 0x0000 
.................... #define index3 0x0010 
.................... #define index_mask 0x0010 
.................... #define quatrature_mode	0x0001 
.................... #define step_direction_mode 0x0002 
.................... #define brushless_dc_mode	0x0003 
.................... #define mode_mask 0x0003 
.................... #define _10_bit_resolution 0x0000 
.................... #define _9_bit_resolution 0x0004 
.................... #define _8_bit_resolution 0x0008 
.................... #define _7_bit_resolution 0x000C 
.................... #define resolution_mask	0x000C 
.................... #define DO_PIN PIN_C5 
.................... #define DI_PIN PIN_C4 
.................... #define CLK_PIN PIN_C3 
.................... #ifndef SLAVE_SELECT 
.................... #define SLAVE_SELECT PIN_A5 
.................... #endif 
....................  
.................... static long setup; 
....................  
.................... void write_encoder(long data) { 
....................  
.................... 	register int aux = 0; 
.................... 	register int cont = 0; 
....................  
.................... 	output_high(DO_PIN); 
.................... 	output_low(CLK_PIN); 
.................... 	delay_us(10); 
.................... 	output_high(SLAVE_SELECT); 
.................... 	spi_xfer(data); 
.................... 	output_low(CLK_PIN); 
.................... 	output_low(DO_PIN); 
.................... 	delay_us(2); 
.................... 	for (cont = 0; cont < 16; ++cont) { 
.................... 		output_high(DO_PIN); 
.................... 		delay_us(1); 
.................... 		output_high(CLK_PIN); 
.................... 		delay_us(2); 
.................... 		output_low(CLK_PIN); 
.................... 		delay_us(1); 
.................... 		output_low(DO_PIN); 
.................... 	} 
.................... 	output_low(SLAVE_SELECT); 
.................... } 
....................  
.................... void setup_encoder(long new_setup, int zero_mark) { 
.................... 	if (new_setup & direction_mask) { 
.................... 		setup |= direction_mask; 
.................... 	} 
.................... 	if (new_setup & index_mask) { 
.................... 		setup |= index_mask; 
.................... 	} 
.................... 	if (new_setup & mode_mask) { 
.................... 		switch (new_setup & mode_mask) { 
.................... 		case quatrature_mode: 
.................... 			setup |= quatrature_mode; 
.................... 			break; 
.................... 		case step_direction_mode: 
.................... 			setup |= step_direction_mode; 
.................... 			break; 
.................... 		case brushless_dc_mode: 
.................... 			setup |= brushless_dc_mode; 
.................... 			break; 
.................... 		default: 
.................... 			break; 
.................... 		} 
.................... 	} 
.................... 	if (new_setup & resolution_mask) { 
.................... 		switch (new_setup & resolution_mask) { 
.................... 		case _9_bit_resolution: 
.................... 			setup |= _9_bit_resolution; 
.................... 			break; 
.................... 		case _8_bit_resolution: 
.................... 			setup |= _8_bit_resolution; 
.................... 			break; 
.................... 		case _7_bit_resolution: 
.................... 			setup |= _7_bit_resolution; 
.................... 			break; 
.................... 		default: 
.................... 			break; 
.................... 		} 
.................... 	} 
.................... 	if (zero_mark && zero_mark < 1024) { 
.................... 		setup |= (long) zero_mark << 5; 
.................... 	} 
.................... 	spi_xfer(setup); 
.................... } 
....................  
.................... void clear_bus(void) { 
.................... 	output_low(SLAVE_SELECT); 
*
000E:  BCF    F92.5
0010:  BCF    F89.5
.................... 	output_low(CLK_PIN); 
0012:  BCF    F94.3
0014:  BCF    F8B.3
.................... 	output_low(DO_PIN); 
0016:  BCF    F94.5
0018:  BCF    F8B.5
.................... 	output_low(DI_PIN); 
001A:  BCF    F94.4
001C:  BCF    F8B.4
.................... } 
001E:  RETURN 0
....................  
.................... #endif /* AS5040_H_ */ 
....................  
....................  
.................... long leitura; 
.................... int ctrl; 
....................  
.................... void main(void) { 
*
00AE:  CLRF   FF8
00B0:  BCF    FD0.7
00B2:  CLRF   FEA
00B4:  CLRF   FE9
00B6:  BSF    FB8.3
00B8:  MOVLW  1A
00BA:  MOVWF  FAF
00BC:  MOVLW  06
00BE:  MOVWF  FB0
00C0:  MOVLW  A6
00C2:  MOVWF  FAC
00C4:  MOVLW  90
00C6:  MOVWF  FAB
00C8:  BSF    F94.4
00CA:  BCF    F94.5
00CC:  BCF    F94.3
00CE:  BCF    F8B.3
00D0:  MOVLW  00
00D2:  MOVWF  F7E
00D4:  BCF    FC1.4
00D6:  BCF    FC1.5
00D8:  MOVF   F7F,W
00DA:  ANDLW  E0
00DC:  MOVWF  F7F
00DE:  BCF    F79.5
00E0:  BCF    F79.4
00E2:  CLRF   F7A
00E4:  CLRF   F7B
00E6:  CLRF   04
00E8:  CLRF   05
.................... 	clear_bus(); 
00EA:  RCALL  000E
.................... 	delay_ms(100); 
00EC:  MOVLW  64
00EE:  MOVWF  09
00F0:  RCALL  0020
.................... //	setup_encoder(clockwise | _7_bit_resolution | step_direction_mode, 64); 
.................... 	spi_xfer(0x5555); 
00F2:  MOVLW  55
00F4:  MOVWF  0A
00F6:  MOVWF  09
00F8:  MOVLW  10
00FA:  MOVWF  0B
00FC:  BRA    0048
.................... 	clear_bus(); 
00FE:  RCALL  000E
.................... 	printf("\n\rReboot"); 
0100:  MOVLW  04
0102:  MOVWF  FF6
0104:  MOVLW  00
0106:  MOVWF  FF7
0108:  BRA    008A
.................... 	delay_ms(100); 
010A:  MOVLW  64
010C:  MOVWF  09
010E:  RCALL  0020
.................... 	sleep(); 
0110:  MOVFF  FD3,00
0114:  MOVLW  7C
0116:  ANDWF  FD3,F
0118:  SLEEP 
011A:  MOVFF  00,FD3
....................  
.................... //	while (TRUE) { 
.................... // 
.................... //		output_low(SLAVE_SELECT); 
.................... //		leitura = spi_xfer(0); 
.................... //		output_high(SLAVE_SELECT); 
.................... //		printf("%Lu  -  %d \n\r", leitura >> 6, (int) (leitura & 0x0006) >> 1); 
.................... //		delay_ms(500); 
.................... //	} 
.................... } 
011E:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
