CCS PCH C Compiler, Version 4.124, 5967               28-mar-13 09:12

               Filename: E:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used: 1272 bytes (4%)
                         Largest free fragment is 31492
               RAM used: 31 (2%) at main() level
                         46 (3%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  GOTO   044C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   00BA
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   00FE
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... /*Ligacao do Encoder 
....................  * 	MR - A 
....................  * 	VM - B 
....................  * 	LR - Z 
....................  * 	AM - VSS 
....................  * 	VD - VDD 
....................  */ 
....................  
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
....................  
.................... #fuses H4,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(crystal=10MHz, clock=40MHz) 
*
0136:  CLRF   FEA
0138:  MOVLW  28
013A:  MOVWF  FE9
013C:  MOVF   FEF,W
013E:  BZ    015C
0140:  MOVLW  0C
0142:  MOVWF  01
0144:  CLRF   00
0146:  DECFSZ 00,F
0148:  BRA    0146
014A:  DECFSZ 01,F
014C:  BRA    0144
014E:  MOVLW  F7
0150:  MOVWF  00
0152:  DECFSZ 00,F
0154:  BRA    0152
0156:  BRA    0158
0158:  DECFSZ FEF,F
015A:  BRA    0140
015C:  RETURN 0
*
01DE:  MOVLW  02
01E0:  SUBWF  2D,F
01E2:  BNC   01FA
01E4:  CLRF   FEA
01E6:  MOVLW  2D
01E8:  MOVWF  FE9
01EA:  MOVF   FEF,W
01EC:  BZ    01FA
01EE:  MOVLW  02
01F0:  MOVWF  00
01F2:  DECFSZ 00,F
01F4:  BRA    01F2
01F6:  DECFSZ FEF,F
01F8:  BRA    01EE
01FA:  GOTO   0214 (RETURN)
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use spi(MASTER, DI=PIN_C4, DO=PIN_C5, CLK=PIN_C3, MODE=0,  BAUD=500000, BITS=16, DATA_HOLD=1) 
....................  
.................... #define	saida_desce	PIN_B6 
.................... #define	saida_sobe	PIN_B7 
.................... #define canalA		PIN_B0 
.................... #define canalZ		PIN_B1 
.................... #define canalB		PIN_B2 
....................  
.................... static long pulsos, pulsosMax; 
.................... static int zeros; 
....................  
.................... #include "funcoes.h" 
.................... /* 
....................  * funcoes.h 
....................  * 
....................  *  Created on: 28/03/2013 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #ifndef FUNCOES_H_ 
.................... #define FUNCOES_H_ 
....................  
.................... void parar(void) { 
.................... 	output_high(saida_sobe); 
*
012A:  BCF    F93.7
012C:  BSF    F8A.7
.................... 	output_high(saida_desce); 
012E:  BCF    F93.6
0130:  BSF    F8A.6
.................... } 
0132:  GOTO   047E (RETURN)
....................  
.................... void descer(void) { 
.................... 	output_high(saida_sobe); 
.................... 	delay_ms(50); 
.................... 	output_low(saida_desce); 
.................... } 
....................  
.................... void subir(void) { 
.................... 	output_high(saida_desce); 
*
01CC:  BCF    F93.6
01CE:  BSF    F8A.6
.................... 	delay_ms(50); 
01D0:  MOVLW  32
01D2:  MOVWF  28
01D4:  RCALL  0136
.................... 	output_low(saida_sobe); 
01D6:  BCF    F93.7
01D8:  BCF    F8A.7
.................... } 
01DA:  GOTO   049A (RETURN)
....................  
.................... #endif /* FUNCOES_H_ */ 
....................  
.................... #include "lcd_8b.c" 
.................... #define en pin_e1 
.................... #define rs pin_e0 
.................... #define data output_d 
....................  
....................  
.................... void lcd_cmd (byte cmd) { 
.................... 	 
....................   data (cmd); 
*
015E:  CLRF   F95
0160:  MOVFF  2D,F8C
.................... 	delay_us (10); 
0164:  MOVLW  21
0166:  MOVWF  00
0168:  DECFSZ 00,F
016A:  BRA    0168
.................... 	output_high (en); 
016C:  BCF    F96.1
016E:  BSF    F8D.1
.................... 	delay_us (10); 
0170:  MOVLW  21
0172:  MOVWF  00
0174:  DECFSZ 00,F
0176:  BRA    0174
.................... 	output_low (en); 
0178:  BCF    F96.1
017A:  BCF    F8D.1
....................  
.................... } 
017C:  RETURN 0
....................  
....................  
.................... void lcd_envia_byte(boolean nivel,byte dado) { 
.................... 	 
....................   output_low(rs); 
*
01FE:  BCF    F96.0
0200:  BCF    F8D.0
.................... 	output_bit(rs,nivel); 
0202:  MOVF   2B,F
0204:  BNZ   020A
0206:  BCF    F8D.0
0208:  BRA    020C
020A:  BSF    F8D.0
020C:  BCF    F96.0
.................... 	delay_us(100); 
020E:  MOVLW  64
0210:  MOVWF  2D
0212:  BRA    01DE
.................... 	output_low(en); 
0214:  BCF    F96.1
0216:  BCF    F8D.1
.................... 	lcd_cmd(dado); 
0218:  MOVFF  2C,2D
021C:  RCALL  015E
....................  
.................... } 
021E:  RETURN 0
....................  
.................... void lcd_pos_xy(byte x, byte y) { 
.................... 	 
....................   byte endereco; 
.................... 	 
....................   if (y!=1) 
0220:  DECFSZ 29,W
0222:  BRA    0226
0224:  BRA    022C
.................... 		endereco = 0xc0; 
0226:  MOVLW  C0
0228:  MOVWF  2A
.................... 	else 
022A:  BRA    0230
.................... 		endereco = 0x80; 
022C:  MOVLW  80
022E:  MOVWF  2A
....................  
....................   endereco += x-1; 
0230:  MOVLW  01
0232:  SUBWF  28,W
0234:  ADDWF  2A,F
.................... 	lcd_envia_byte(0, endereco); 
0236:  CLRF   2B
0238:  MOVFF  2A,2C
023C:  RCALL  01FE
....................  
....................  
.................... } 
023E:  GOTO   0288 (RETURN)
....................  
.................... void lcd (char c) { 
.................... 	 
....................   switch(c) { 
0242:  MOVF   27,W
0244:  XORLW  0C
0246:  BZ    0256
0248:  XORLW  06
024A:  BZ    0266
024C:  XORLW  07
024E:  BZ    0266
0250:  XORLW  05
0252:  BZ    0272
0254:  BRA    027C
.................... 		 
....................     case '\f' : 
.................... 			lcd_envia_byte(0, 1); 
0256:  CLRF   2B
0258:  MOVLW  01
025A:  MOVWF  2C
025C:  RCALL  01FE
.................... 			delay_ms(2); 
025E:  MOVLW  02
0260:  MOVWF  28
0262:  RCALL  0136
.................... 			break; 
0264:  BRA    0288
.................... 		 
....................     case '\n' : 
.................... 		 
....................     case '\r' : 
.................... 			lcd_pos_xy(1, 2); 
0266:  MOVLW  01
0268:  MOVWF  28
026A:  MOVLW  02
026C:  MOVWF  29
026E:  BRA    0220
.................... 			break; 
0270:  BRA    0288
.................... 		 
....................     case '\b' : 
.................... 			lcd_envia_byte(0, 0x10); 
0272:  CLRF   2B
0274:  MOVLW  10
0276:  MOVWF  2C
0278:  RCALL  01FE
.................... 			break; 
027A:  BRA    0288
.................... 		 
....................     default : 
.................... 			lcd_envia_byte(1, c); 
027C:  MOVLW  01
027E:  MOVWF  2B
0280:  MOVFF  27,2C
0284:  RCALL  01FE
....................       break; 
0286:  BRA    0288
.................... 	} 
....................    
.................... }   
0288:  RETURN 0
....................  
.................... void lcd_init() { 
.................... 	 
.................... 	byte conta; 
....................  
.................... 	data (0x00); 
*
017E:  CLRF   F95
0180:  CLRF   F8C
.................... 	output_low (rs); 
0182:  BCF    F96.0
0184:  BCF    F8D.0
.................... 	output_low(en); 
0186:  BCF    F96.1
0188:  BCF    F8D.1
.................... 	delay_ms(15);  
018A:  MOVLW  0F
018C:  MOVWF  28
018E:  RCALL  0136
.................... 	 
....................   for (conta = 1; conta <= 3; conta++) { 
0190:  MOVLW  01
0192:  MOVWF  1E
0194:  MOVF   1E,W
0196:  SUBLW  03
0198:  BNC   01AA
.................... 		 
....................     lcd_cmd (0x30); 
019A:  MOVLW  30
019C:  MOVWF  2D
019E:  RCALL  015E
.................... 		delay_ms (5); 
01A0:  MOVLW  05
01A2:  MOVWF  28
01A4:  RCALL  0136
.................... 	 
....................   } 
01A6:  INCF   1E,F
01A8:  BRA    0194
.................... 	 
....................   lcd_cmd (0x38); 
01AA:  MOVLW  38
01AC:  MOVWF  2D
01AE:  RCALL  015E
.................... 	lcd_cmd (0x01); 
01B0:  MOVLW  01
01B2:  MOVWF  2D
01B4:  RCALL  015E
.................... 	delay_ms (1); 
01B6:  MOVLW  01
01B8:  MOVWF  28
01BA:  RCALL  0136
.................... 	lcd_cmd (0x0c); 
01BC:  MOVLW  0C
01BE:  MOVWF  2D
01C0:  RCALL  015E
.................... 	lcd_cmd(0x06); 
01C2:  MOVLW  06
01C4:  MOVWF  2D
01C6:  RCALL  015E
....................  
.................... } 
01C8:  GOTO   0480 (RETURN)
....................  
....................  
.................... #INT_EXT 
.................... void isr_ext(void) { 
.................... 	clear_interrupt(INT_EXT); 
*
00BA:  BCF    FF2.1
.................... 	if (input(canalB)) 
00BC:  BSF    F93.2
00BE:  BTFSS  F81.2
00C0:  BRA    00CA
.................... 		pulsos++; 
00C2:  INCF   19,F
00C4:  BTFSC  FD8.2
00C6:  INCF   1A,F
.................... 	else { 
00C8:  BRA    00E2
.................... 		if (pulsos > 0) 
00CA:  MOVF   19,F
00CC:  BNZ   00D2
00CE:  MOVF   1A,F
00D0:  BZ    00DC
.................... 			pulsos--; 
00D2:  MOVF   19,W
00D4:  BTFSC  FD8.2
00D6:  DECF   1A,F
00D8:  DECF   19,F
.................... 		else 
00DA:  BRA    00E2
.................... 			pulsos = 1023; 
00DC:  MOVLW  03
00DE:  MOVWF  1A
00E0:  SETF   19
.................... 	} 
.................... 	if (pulsos > pulsosMax) 
00E2:  MOVF   1C,W
00E4:  SUBWF  1A,W
00E6:  BNC   00F8
00E8:  BNZ   00F0
00EA:  MOVF   19,W
00EC:  SUBWF  1B,W
00EE:  BC    00F8
.................... 		pulsosMax = pulsos; 
00F0:  MOVFF  1A,1C
00F4:  MOVFF  19,1B
.................... } 
....................  
00F8:  BCF    FF2.1
00FA:  GOTO   006C
.................... #INT_EXT1 
.................... void isr_ext1(void) { 
.................... 	clear_interrupt(INT_EXT1); 
00FE:  BCF    FF0.0
.................... 	pulsos = 0; 
0100:  CLRF   1A
0102:  CLRF   19
.................... 	zeros++; 
0104:  INCF   1D,F
.................... } 
....................  
0106:  BCF    FF0.0
0108:  GOTO   006C
.................... void main(void) { 
*
044C:  CLRF   FF8
044E:  BCF    FD0.7
0450:  BSF    07.7
0452:  CLRF   FEA
0454:  CLRF   FE9
0456:  MOVLW  40
0458:  MOVWF  FAF
045A:  MOVLW  A2
045C:  MOVWF  FAC
045E:  MOVLW  90
0460:  MOVWF  FAB
0462:  BSF    F94.4
0464:  BCF    F94.5
0466:  BCF    F94.3
0468:  BCF    F8B.3
046A:  BSF    FC1.0
046C:  BSF    FC1.1
046E:  BSF    FC1.2
0470:  BCF    FC1.3
0472:  CLRF   19
0474:  CLRF   1A
0476:  CLRF   1B
0478:  CLRF   1C
047A:  CLRF   1D
.................... 	parar(); 
047C:  BRA    012A
.................... 	lcd_init(); 
047E:  BRA    017E
.................... 	port_b_pullups(TRUE); 
0480:  BCF    FF1.7
.................... 	delay_ms(100); 
0482:  MOVLW  64
0484:  MOVWF  28
0486:  RCALL  0136
.................... 	clear_interrupt(INT_EXT); 
0488:  BCF    FF2.1
.................... 	clear_interrupt(INT_EXT1); 
048A:  BCF    FF0.0
.................... 	enable_interrupts(INT_EXT_L2H); 
048C:  BSF    FF2.4
048E:  BSF    FF1.6
.................... 	enable_interrupts(INT_EXT1_L2H); 
0490:  BSF    FF0.3
0492:  BSF    FF1.5
.................... 	enable_interrupts(GLOBAL); 
0494:  MOVLW  C0
0496:  IORWF  FF2,F
.................... 	subir(); 
0498:  BRA    01CC
.................... 	while (TRUE) { 
.................... 		printf(lcd, "\fPulsos: %Lu\nZeros:%d Max:%Lu", pulsos, zeros, pulsosMax); 
049A:  MOVLW  0C
049C:  MOVWF  FF6
049E:  MOVLW  01
04A0:  MOVWF  FF7
04A2:  MOVLW  09
04A4:  MOVWF  1E
04A6:  RCALL  028A
04A8:  MOVLW  10
04AA:  MOVWF  FE9
04AC:  MOVFF  1A,1F
04B0:  MOVFF  19,1E
04B4:  RCALL  02A8
04B6:  MOVLW  18
04B8:  MOVWF  FF6
04BA:  MOVLW  01
04BC:  MOVWF  FF7
04BE:  MOVLW  07
04C0:  MOVWF  1E
04C2:  RCALL  028A
04C4:  MOVFF  1D,1E
04C8:  MOVLW  1F
04CA:  MOVWF  1F
04CC:  BRA    0382
04CE:  MOVLW  21
04D0:  MOVWF  FF6
04D2:  MOVLW  01
04D4:  MOVWF  FF7
04D6:  MOVLW  05
04D8:  MOVWF  1E
04DA:  RCALL  028A
04DC:  MOVLW  10
04DE:  MOVWF  FE9
04E0:  MOVFF  1C,1F
04E4:  MOVFF  1B,1E
04E8:  RCALL  02A8
.................... 		delay_ms(500); 
04EA:  MOVLW  02
04EC:  MOVWF  1E
04EE:  MOVLW  FA
04F0:  MOVWF  28
04F2:  RCALL  0136
04F4:  DECFSZ 1E,F
04F6:  BRA    04EE
.................... 	} 
04F8:  BRA    049A
.................... } 
04FA:  SLEEP 

Configuration Fuses:
   Word  1: 2600   H4 NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
