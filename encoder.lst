CCS PCH C Compiler, Version 4.124, 5967               23-mar-13 10:19

               Filename: E:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used: 1150 bytes (4%)
                         Largest free fragment is 31618
               RAM used: 12 (1%) at main() level
                         21 (1%) worst case
               Stack:    2 locations

*
0000:  GOTO   0368
.................... #include <18F45K20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #fuses H4,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(crystal=15MHz, clock=60MHz) 
*
003C:  CLRF   FEA
003E:  MOVLW  0A
0040:  MOVWF  FE9
0042:  MOVF   FEF,W
0044:  BZ    0062
0046:  MOVLW  13
0048:  MOVWF  01
004A:  CLRF   00
004C:  DECFSZ 00,F
004E:  BRA    004C
0050:  DECFSZ 01,F
0052:  BRA    004A
0054:  MOVLW  73
0056:  MOVWF  00
0058:  DECFSZ 00,F
005A:  BRA    0058
005C:  NOP   
005E:  DECFSZ FEF,F
0060:  BRA    0046
0062:  RETURN 0
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use spi(MASTER, DI=PIN_C4, DO=PIN_C5, CLK=PIN_C3, MODE=0,  BAUD=1000000, BITS=16) 
0064:  MOVF   0E,W
0066:  SUBLW  10
0068:  BZ    0074
006A:  MOVWF  0F
006C:  RLCF   0C,F
006E:  RLCF   0D,F
0070:  DECFSZ 0F,F
0072:  BRA    006C
0074:  BSF    F94.4
0076:  BCF    F94.5
0078:  BCF    F94.3
007A:  BCF    F8B.3
007C:  MOVFF  0E,0F
0080:  BTFSS  0D.7
0082:  BCF    F8B.5
0084:  BTFSC  0D.7
0086:  BSF    F8B.5
0088:  RLCF   0C,F
008A:  RLCF   0D,F
008C:  BSF    F8B.3
008E:  NOP   
0090:  RLCF   01,F
0092:  RLCF   02,F
0094:  BTFSS  F82.4
0096:  BCF    01.0
0098:  BTFSC  F82.4
009A:  BSF    01.0
009C:  BCF    F8B.3
009E:  DECFSZ 0F,F
00A0:  BRA    0080
00A2:  RETURN 0
....................  
.................... #define SLAVE_SELECT PIN_A5 
.................... #include "as5040.h" 
.................... /* 
....................  * as5040.h 
....................  * 
....................  *  Created on: 30/03/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #ifndef AS5040_H_ 
.................... #define AS5040_H_ 
....................  
.................... #define clockwise 0x0000 
.................... #define couter_clockwise 0x8000 
.................... #define direction_mask 0x8000 
.................... #define zero_mask 0x7FE0 
.................... #define index1 0x0000 
.................... #define index3 0x0010 
.................... #define index_mask 0x0010 
.................... #define quatrature_mode	0x0001 
.................... #define step_direction_mode 0x0002 
.................... #define brushless_dc_mode	0x0003 
.................... #define mode_mask 0x0003 
.................... #define _10_bit_resolution 0x0000 
.................... #define _9_bit_resolution 0x0004 
.................... #define _8_bit_resolution 0x0008 
.................... #define _7_bit_resolution 0x000C 
.................... #define resolution_mask	0x000C 
.................... #define DO_PIN PIN_C5 
.................... #define DI_PIN PIN_C4 
.................... #define CLK_PIN PIN_C3 
.................... #ifndef SLAVE_SELECT 
.................... #define SLAVE_SELECT PIN_A5 
.................... #endif 
....................  
.................... static long setup; 
....................  
.................... void write_encoder(long data) { 
....................  
.................... 	register int aux = 0; 
.................... 	register int cont = 0; 
....................  
.................... 	output_high(DO_PIN); 
.................... 	output_low(CLK_PIN); 
.................... 	delay_us(10); 
.................... 	output_high(SLAVE_SELECT); 
.................... 	spi_xfer(data); 
.................... 	output_low(CLK_PIN); 
.................... 	output_low(DO_PIN); 
.................... 	delay_us(2); 
.................... 	for (cont = 0; cont < 16; ++cont) { 
.................... 		output_high(DO_PIN); 
.................... 		delay_us(1); 
.................... 		output_high(CLK_PIN); 
.................... 		delay_us(2); 
.................... 		output_low(CLK_PIN); 
.................... 		delay_us(1); 
.................... 		output_low(DO_PIN); 
.................... 	} 
.................... 	output_low(SLAVE_SELECT); 
.................... } 
....................  
.................... void setup_encoder(long new_setup, int zero_mark) { 
.................... 	if (new_setup & direction_mask) { 
00A4:  ANDLW  00
00A6:  MOVWF  00
00A8:  MOVF   0A,W
00AA:  ANDLW  80
00AC:  MOVWF  03
00AE:  MOVF   00,W
00B0:  IORWF  03,W
00B2:  BZ    00B6
.................... 		setup |= direction_mask; 
00B4:  BSF    05.7
.................... 	} 
.................... 	if (new_setup & index_mask) { 
00B6:  MOVF   09,W
00B8:  ANDLW  10
00BA:  MOVWF  00
00BC:  CLRF   03
00BE:  MOVF   00,W
00C0:  IORWF  03,W
00C2:  BZ    00C6
.................... 		setup |= index_mask; 
00C4:  BSF    04.4
.................... 	} 
.................... 	if (new_setup & mode_mask) { 
00C6:  MOVF   09,W
00C8:  ANDLW  03
00CA:  MOVWF  00
00CC:  CLRF   03
00CE:  MOVF   00,W
00D0:  IORWF  03,W
00D2:  BZ    010C
.................... 		switch (new_setup & mode_mask) { 
00D4:  MOVF   09,W
00D6:  ANDLW  03
00D8:  MOVWF  00
00DA:  CLRF   03
00DC:  MOVF   03,W
00DE:  BNZ   00E6
00E0:  MOVLW  01
00E2:  SUBWF  00,W
00E4:  BZ    00FC
00E6:  MOVF   03,W
00E8:  BNZ   00F0
00EA:  MOVLW  02
00EC:  SUBWF  00,W
00EE:  BZ    0100
00F0:  MOVF   03,W
00F2:  BNZ   00FA
00F4:  MOVLW  03
00F6:  SUBWF  00,W
00F8:  BZ    0104
00FA:  BRA    010A
.................... 		case quatrature_mode: 
.................... 			setup |= quatrature_mode; 
00FC:  BSF    04.0
.................... 			break; 
00FE:  BRA    010C
.................... 		case step_direction_mode: 
.................... 			setup |= step_direction_mode; 
0100:  BSF    04.1
.................... 			break; 
0102:  BRA    010C
.................... 		case brushless_dc_mode: 
.................... 			setup |= brushless_dc_mode; 
0104:  MOVLW  03
0106:  IORWF  04,F
.................... 			break; 
0108:  BRA    010C
.................... 		default: 
.................... 			break; 
010A:  BRA    010C
.................... 		} 
.................... 	} 
.................... 	if (new_setup & resolution_mask) { 
010C:  MOVF   09,W
010E:  ANDLW  0C
0110:  MOVWF  00
0112:  CLRF   03
0114:  MOVF   00,W
0116:  IORWF  03,W
0118:  BZ    0152
.................... 		switch (new_setup & resolution_mask) { 
011A:  MOVF   09,W
011C:  ANDLW  0C
011E:  MOVWF  00
0120:  CLRF   03
0122:  MOVF   03,W
0124:  BNZ   012C
0126:  MOVLW  04
0128:  SUBWF  00,W
012A:  BZ    0142
012C:  MOVF   03,W
012E:  BNZ   0136
0130:  MOVLW  08
0132:  SUBWF  00,W
0134:  BZ    0146
0136:  MOVF   03,W
0138:  BNZ   0140
013A:  MOVLW  0C
013C:  SUBWF  00,W
013E:  BZ    014A
0140:  BRA    0150
.................... 		case _9_bit_resolution: 
.................... 			setup |= _9_bit_resolution; 
0142:  BSF    04.2
.................... 			break; 
0144:  BRA    0152
.................... 		case _8_bit_resolution: 
.................... 			setup |= _8_bit_resolution; 
0146:  BSF    04.3
.................... 			break; 
0148:  BRA    0152
.................... 		case _7_bit_resolution: 
.................... 			setup |= _7_bit_resolution; 
014A:  MOVLW  0C
014C:  IORWF  04,F
.................... 			break; 
014E:  BRA    0152
.................... 		default: 
.................... 			break; 
0150:  BRA    0152
.................... 		} 
.................... 	} 
.................... 	if (zero_mark && zero_mark < 1024) { 
0152:  MOVF   0B,F
0154:  BZ    017C
.................... 		setup |= (long) zero_mark << 5; 
0156:  CLRF   0D
0158:  RLCF   0B,W
015A:  MOVWF  02
015C:  RLCF   0D,W
015E:  MOVWF  03
0160:  RLCF   02,F
0162:  RLCF   03,F
0164:  RLCF   02,F
0166:  RLCF   03,F
0168:  RLCF   02,F
016A:  RLCF   03,F
016C:  RLCF   02,F
016E:  RLCF   03,F
0170:  MOVLW  E0
0172:  ANDWF  02,F
0174:  MOVF   02,W
0176:  IORWF  04,F
0178:  MOVF   03,W
017A:  IORWF  05,F
.................... 	} 
.................... 	output_high(DO_PIN); 
017C:  BCF    F94.5
017E:  BSF    F8B.5
.................... 	delay_us(2); 
0180:  MOVLW  09
0182:  MOVWF  00
0184:  DECFSZ 00,F
0186:  BRA    0184
0188:  BRA    018A
.................... 	output_high(SLAVE_SELECT); 
018A:  BCF    F92.5
018C:  BSF    F89.5
.................... 	delay_us(2); 
018E:  MOVLW  09
0190:  MOVWF  00
0192:  DECFSZ 00,F
0194:  BRA    0192
0196:  BRA    0198
.................... 	spi_xfer(setup); 
0198:  MOVFF  05,0D
019C:  MOVFF  04,0C
01A0:  MOVLW  10
01A2:  MOVWF  0E
01A4:  RCALL  0064
.................... } 
01A6:  GOTO   03C2 (RETURN)
....................  
.................... void clear_bus(void) { 
.................... 	output_low(SLAVE_SELECT); 
*
002A:  BCF    F92.5
002C:  BCF    F89.5
.................... 	output_low(CLK_PIN); 
002E:  BCF    F94.3
0030:  BCF    F8B.3
.................... 	output_low(DO_PIN); 
0032:  BCF    F94.5
0034:  BCF    F8B.5
.................... 	output_low(DI_PIN); 
0036:  BCF    F94.4
0038:  BCF    F8B.4
.................... } 
003A:  RETURN 0
....................  
.................... #endif /* AS5040_H_ */ 
....................  
....................  
.................... static long leitura; 
.................... static int zero; 
....................  
.................... void main(void) { 
*
0368:  CLRF   FF8
036A:  BCF    FD0.7
036C:  CLRF   FEA
036E:  CLRF   FE9
0370:  BSF    FB8.3
0372:  MOVLW  1A
0374:  MOVWF  FAF
0376:  MOVLW  06
0378:  MOVWF  FB0
037A:  MOVLW  A6
037C:  MOVWF  FAC
037E:  MOVLW  90
0380:  MOVWF  FAB
0382:  BSF    F94.4
0384:  BCF    F94.5
0386:  BCF    F94.3
0388:  BCF    F8B.3
038A:  MOVLW  00
038C:  MOVWF  F7E
038E:  BCF    FC1.4
0390:  BCF    FC1.5
0392:  MOVF   F7F,W
0394:  ANDLW  E0
0396:  MOVWF  F7F
0398:  BCF    F79.5
039A:  BCF    F79.4
039C:  CLRF   F7A
039E:  CLRF   F7B
03A0:  CLRF   04
03A2:  CLRF   05
03A4:  CLRF   06
03A6:  CLRF   07
03A8:  CLRF   08
.................... 	zero = 64; 
03AA:  MOVLW  40
03AC:  MOVWF  08
.................... 	clear_bus(); 
03AE:  RCALL  002A
.................... 	delay_ms(100); 
03B0:  MOVLW  64
03B2:  MOVWF  0A
03B4:  RCALL  003C
.................... 	setup_encoder(clockwise | _7_bit_resolution | step_direction_mode, zero); 
03B6:  CLRF   0A
03B8:  MOVLW  0E
03BA:  MOVWF  09
03BC:  MOVFF  08,0B
03C0:  BRA    00A4
.................... 	clear_bus(); 
03C2:  RCALL  002A
.................... 	printf("\n\rProg: 7 bits zero %d", zero); 
03C4:  MOVLW  04
03C6:  MOVWF  FF6
03C8:  MOVLW  00
03CA:  MOVWF  FF7
03CC:  MOVLW  14
03CE:  MOVWF  0C
03D0:  RCALL  01AA
03D2:  MOVFF  08,0C
03D6:  MOVLW  1F
03D8:  MOVWF  0D
03DA:  RCALL  01F2
.................... 	delay_ms(100); 
03DC:  MOVLW  64
03DE:  MOVWF  0A
03E0:  RCALL  003C
.................... 	while (TRUE) { 
.................... 		output_low(SLAVE_SELECT); 
03E2:  BCF    F92.5
03E4:  BCF    F89.5
.................... 		leitura = spi_xfer(0); 
03E6:  CLRF   0D
03E8:  CLRF   0C
03EA:  MOVLW  10
03EC:  MOVWF  0E
03EE:  RCALL  0064
03F0:  MOVF   01,W
03F2:  MOVFF  02,07
03F6:  MOVFF  01,06
.................... 		output_high(SLAVE_SELECT); 
03FA:  BCF    F92.5
03FC:  BSF    F89.5
.................... 		printf(" \n\r%Lu  -  %d", leitura >> 6, (int) (leitura & 0x0006) >> 1); 
03FE:  RRCF   07,W
0400:  MOVWF  0A
0402:  RRCF   06,W
0404:  MOVWF  09
0406:  RRCF   0A,F
0408:  RRCF   09,F
040A:  RRCF   0A,F
040C:  RRCF   09,F
040E:  RRCF   0A,F
0410:  RRCF   09,F
0412:  RRCF   0A,F
0414:  RRCF   09,F
0416:  RRCF   0A,F
0418:  RRCF   09,F
041A:  MOVLW  03
041C:  ANDWF  0A,F
041E:  MOVF   06,W
0420:  ANDLW  06
0422:  MOVWF  00
0424:  CLRF   03
0426:  MOVF   00,W
0428:  BCF    FD8.0
042A:  RRCF   00,W
042C:  MOVWF  0B
042E:  MOVLW  20
0430:  BTFSS  F9E.4
0432:  BRA    0430
0434:  MOVWF  FAD
0436:  MOVLW  0A
0438:  BTFSS  F9E.4
043A:  BRA    0438
043C:  MOVWF  FAD
043E:  MOVLW  0D
0440:  BTFSS  F9E.4
0442:  BRA    0440
0444:  MOVWF  FAD
0446:  MOVLW  10
0448:  MOVWF  FE9
044A:  MOVFF  0A,0D
044E:  MOVFF  09,0C
0452:  BRA    02C2
0454:  MOVLW  22
0456:  MOVWF  FF6
0458:  MOVLW  00
045A:  MOVWF  FF7
045C:  MOVLW  05
045E:  MOVWF  0C
0460:  RCALL  01AA
0462:  MOVFF  0B,0C
0466:  MOVLW  1F
0468:  MOVWF  0D
046A:  RCALL  01F2
.................... 		delay_ms(500); 
046C:  MOVLW  02
046E:  MOVWF  09
0470:  MOVLW  FA
0472:  MOVWF  0A
0474:  RCALL  003C
0476:  DECFSZ 09,F
0478:  BRA    0470
.................... 	} 
047A:  BRA    03E2
.................... } 
047C:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
