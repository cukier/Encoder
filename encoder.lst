CCS PCH C Compiler, Version 4.124, 63923               10-fev-12 13:47

               Filename: D:\Projetos\Encoder\encoder.lst

               ROM used: 282 bytes (1%)
                         Largest free fragment is 32482
               RAM used: 26 (2%) at main() level
                         26 (2%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  GOTO   00FA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   00BA
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   00DA
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <18F452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device adc=16 
.................... #fuses HS 
.................... //#use delay(clock=4Mhz) 
....................  
.................... //#include "lcd_8b.c" 
....................  
.................... int chave = 0; 
....................  
.................... #INT_EXT 
.................... void isr_INT_EXT() { 
.................... 	if (!input(pin_b1) && chave != 2) { 
00BA:  BSF    F93.1
00BC:  BTFSC  F81.1
00BE:  BRA    00D0
00C0:  MOVF   19,W
00C2:  SUBLW  02
00C4:  BZ    00D0
.................... 		//		if (chave != 2) 
.................... 		output_c(1); 
00C6:  CLRF   F94
00C8:  MOVLW  01
00CA:  MOVWF  F8B
.................... 		chave = 1; 
00CC:  MOVWF  19
.................... 	} else { 
00CE:  BRA    00D4
.................... 		output_c(0); 
00D0:  CLRF   F94
00D2:  CLRF   F8B
.................... 	} 
.................... } 
00D4:  BCF    FF2.1
00D6:  GOTO   006C
.................... #INT_EXT1 
.................... void isr_INT_EXT1() { 
.................... 	if (!input(pin_b0) && chave != 1) { 
00DA:  BSF    F93.0
00DC:  BTFSC  F81.0
00DE:  BRA    00F0
00E0:  DECFSZ 19,W
00E2:  BRA    00E6
00E4:  BRA    00F0
.................... //	if (!input(pin_b0)) { 
.................... //		if (chave != 1) 
.................... 			output_c(2); 
00E6:  CLRF   F94
00E8:  MOVLW  02
00EA:  MOVWF  F8B
.................... 		chave = 2; 
00EC:  MOVWF  19
.................... 	} else { 
00EE:  BRA    00F4
.................... 		output_c(0); 
00F0:  CLRF   F94
00F2:  CLRF   F8B
.................... 	} 
.................... } 
....................  
00F4:  BCF    FF0.0
00F6:  GOTO   006C
.................... void main(void) { 
00FA:  CLRF   FF8
00FC:  BCF    FD0.7
00FE:  BSF    07.7
0100:  CLRF   FEA
0102:  CLRF   FE9
0104:  CLRF   19
0106:  BSF    FC1.0
0108:  BSF    FC1.1
010A:  BSF    FC1.2
010C:  BCF    FC1.3
....................  
.................... 	output_c(0); 
010E:  CLRF   F94
0110:  CLRF   F8B
....................  
.................... //	clear_interrupt(int_ext); 
.................... //	clear_interrupt(int_ext1); 
.................... 	enable_interrupts(INT_EXT); 
0112:  BSF    FF2.4
.................... 	enable_interrupts(INT_EXT1); 
0114:  BSF    FF0.3
.................... 	enable_interrupts(global); 
0116:  MOVLW  C0
0118:  IORWF  FF2,F
....................  
.................... 	while (true) { 
....................  
.................... 	} //Infinite Loop 
011A:  BRA    011A
.................... } //Main 
011C:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
