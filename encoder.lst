CCS PCH C Compiler, Version 4.140, 31805               14-fev-14 16:47

               Filename:   D:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used:   512 bytes (2%)
                           Largest free fragment is 32256
               RAM used:   6 (0%) at main() level
                           10 (1%) worst case
               Stack:     2 locations

*
0000:  GOTO   0152
.................... /*Ligacao do Encoder 
....................  * 	MR - A 
....................  * 	VM - B 
....................  * 	LR - Z 
....................  * 	AM - VSS 
....................  * 	VD - VDD 
....................  */ 
....................  
.................... /*Quando encoder não programado: 
....................  * nr maximo de pulsos... 
....................  * no pino T0CLK : 128 
....................  * no pino EXT:	255 
....................  */ 
....................  
.................... #include <18F45k20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #FUSES H4 
.................... #use delay(crystal=16MHz, clock=64MHz) 
*
0042:  CLRF   FEA
0044:  MOVLW  06
0046:  MOVWF  FE9
0048:  MOVF   FEF,W
004A:  BZ    0068
004C:  MOVLW  14
004E:  MOVWF  01
0050:  CLRF   00
0052:  DECFSZ 00,F
0054:  BRA    0052
0056:  DECFSZ 01,F
0058:  BRA    0050
005A:  MOVLW  BF
005C:  MOVWF  00
005E:  DECFSZ 00,F
0060:  BRA    005E
0062:  BRA    0064
0064:  DECFSZ FEF,F
0066:  BRA    004C
0068:  RETURN 0
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use i2c (slave,scl=PIN_C3,sda=PIN_C4,FORCE_HW,FAST=100000) 
....................  
.................... #define canalA		PIN_A4 
.................... #define canalB		PIN_B4 
.................... #define canalZ		PIN_B5 
.................... #define bto_sobe	PIN_D0 
.................... #define bto_desce	PIN_D1 
....................  
.................... #define debounce	100 
....................  
.................... short ctrl, a, b; 
....................  
.................... short check_bto(int bto) { 
.................... 	if (!input(bto)) { 
*
00D6:  MOVFF  05,06
00DA:  MOVLW  01
00DC:  MOVWF  07
00DE:  MOVLW  0F
00E0:  MOVWF  09
00E2:  MOVLW  92
00E4:  MOVWF  08
00E6:  RCALL  006A
00E8:  MOVFF  05,06
00EC:  MOVLW  0F
00EE:  MOVWF  08
00F0:  MOVLW  80
00F2:  MOVWF  07
00F4:  RCALL  00A8
00F6:  BTFSC  01.0
00F8:  BRA    012A
.................... 		delay_ms(debounce); 
00FA:  MOVLW  64
00FC:  MOVWF  06
00FE:  RCALL  0042
.................... 		return !input(bto); 
0100:  MOVFF  05,06
0104:  MOVLW  01
0106:  MOVWF  07
0108:  MOVLW  0F
010A:  MOVWF  09
010C:  MOVLW  92
010E:  MOVWF  08
0110:  RCALL  006A
0112:  MOVFF  05,06
0116:  MOVLW  0F
0118:  MOVWF  08
011A:  MOVLW  80
011C:  MOVWF  07
011E:  RCALL  00A8
0120:  MOVLW  00
0122:  BTFSS  01.0
0124:  MOVLW  01
0126:  MOVWF  01
0128:  BRA    012E
.................... 	} 
.................... 	return FALSE; 
012A:  MOVLW  00
012C:  MOVWF  01
.................... } 
012E:  RETURN 0
....................  
.................... int main(void) { 
*
0152:  CLRF   FF8
0154:  BCF    FD0.7
0156:  CLRF   FEA
0158:  CLRF   FE9
015A:  BSF    FB8.3
015C:  MOVLW  82
015E:  MOVWF  FAF
0160:  MOVLW  06
0162:  MOVWF  FB0
0164:  MOVLW  A6
0166:  MOVWF  FAC
0168:  MOVLW  90
016A:  MOVWF  FAB
016C:  BSF    F94.3
016E:  BSF    F94.4
0170:  CLRF   FC8
0172:  MOVLW  36
0174:  MOVWF  FC6
0176:  BSF    FC5.0
0178:  MOVLW  00
017A:  MOVWF  F7E
017C:  BCF    FC1.4
017E:  BCF    FC1.5
0180:  MOVF   F7F,W
0182:  ANDLW  E0
0184:  MOVWF  F7F
0186:  BCF    F79.5
0188:  BCF    F79.4
018A:  CLRF   F7A
018C:  CLRF   F7B
....................  
.................... 	delay_ms(300); 
018E:  MOVLW  02
0190:  MOVWF  05
0192:  MOVLW  96
0194:  MOVWF  06
0196:  RCALL  0042
0198:  DECFSZ 05,F
019A:  BRA    0192
....................  
.................... 	while (TRUE) { 
.................... 		a = check_bto(bto_sobe); 
019C:  MOVLW  18
019E:  MOVWF  05
01A0:  RCALL  00D6
01A2:  BCF    04.1
01A4:  BTFSC  01.0
01A6:  BSF    04.1
.................... 		b = check_bto(bto_desce); 
01A8:  MOVLW  19
01AA:  MOVWF  05
01AC:  RCALL  00D6
01AE:  BCF    04.2
01B0:  BTFSC  01.0
01B2:  BSF    04.2
.................... 		if (a && ctrl) { 
01B4:  BTFSS  04.1
01B6:  BRA    01CA
01B8:  BTFSS  04.0
01BA:  BRA    01CA
.................... 			ctrl = FALSE; 
01BC:  BCF    04.0
.................... 			printf("\fPressionado Bto Sobe"); 
01BE:  MOVLW  04
01C0:  MOVWF  FF6
01C2:  MOVLW  00
01C4:  MOVWF  FF7
01C6:  RCALL  0130
.................... 		} else if (b && ctrl) { 
01C8:  BRA    01F8
01CA:  BTFSS  04.2
01CC:  BRA    01E0
01CE:  BTFSS  04.0
01D0:  BRA    01E0
.................... 			ctrl = FALSE; 
01D2:  BCF    04.0
.................... 			printf("\fPressionado Bto Desce"); 
01D4:  MOVLW  1A
01D6:  MOVWF  FF6
01D8:  MOVLW  00
01DA:  MOVWF  FF7
01DC:  RCALL  0130
.................... 		} else if (!(a || b) && !ctrl) { 
01DE:  BRA    01F8
01E0:  BTFSC  04.1
01E2:  BRA    01F8
01E4:  BTFSC  04.2
01E6:  BRA    01F8
01E8:  BTFSC  04.0
01EA:  BRA    01F8
.................... 			ctrl = TRUE; 
01EC:  BSF    04.0
.................... 			printf("\fBotoes Soltos"); 
01EE:  MOVLW  32
01F0:  MOVWF  FF6
01F2:  MOVLW  00
01F4:  MOVWF  FF7
01F6:  RCALL  0130
.................... 		} 
.................... 	} 
01F8:  BRA    019C
....................  
.................... 	return 0; 
01FA:  MOVLW  00
01FC:  MOVWF  01
.................... } 
01FE:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
