CCS PCH C Compiler, Version 4.140, 31805               26-fev-14 15:47

               Filename:   D:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used:   2784 bytes (8%)
                           Largest free fragment is 29980
               RAM used:   40 (3%) at main() level
                           66 (4%) worst case
               Stack:     4 worst case (3 in main + 1 for interrupts)

*
0000:  GOTO   092C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /*Ligacao do Encoder 
....................  * 	MR - A 
....................  * 	VM - B 
....................  * 	LR - Z 
....................  * 	AM - VSS 
....................  * 	VD - VDD 
....................  */ 
....................  
.................... /*Quando encoder não programado: 
....................  * nr maximo de pulsos... 
....................  * no pino T0CLK : 128 
....................  * no pino EXT:	255 
....................  */ 
....................  
.................... #include <18F45k20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #FUSES H4 
.................... #use delay(crystal=16MHz, clock=64MHz) 
*
00E6:  CLRF   FEA
00E8:  MOVLW  27
00EA:  MOVWF  FE9
00EC:  MOVF   FEF,W
00EE:  BZ    010C
00F0:  MOVLW  14
00F2:  MOVWF  01
00F4:  CLRF   00
00F6:  DECFSZ 00,F
00F8:  BRA    00F6
00FA:  DECFSZ 01,F
00FC:  BRA    00F4
00FE:  MOVLW  BF
0100:  MOVWF  00
0102:  DECFSZ 00,F
0104:  BRA    0102
0106:  BRA    0108
0108:  DECFSZ FEF,F
010A:  BRA    00F0
010C:  RETURN 0
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... //#use i2c (slave,scl=PIN_C3,sda=PIN_C4,FORCE_HW,FAST=100000) 
....................  
.................... #define canalA		PIN_B0 
.................... #define canalB		PIN_B4 
.................... #define canalZ		PIN_B5 
.................... #define tempo0		18660 
....................  
.................... #include "botoes.c" 
.................... /* 
....................  * botoes.c 
....................  * 
....................  *  Created on: 26/02/2014 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #define bto_sobe	PIN_D0 
.................... #define bto_desce	PIN_D1 
.................... #define bto_maual	PIN_A4 
.................... #define cmd_sobe	1 
.................... #define cmd_desce	2 
.................... #define cmd_manual	3 
.................... #define cmd_parar	4 
.................... #define debounce	100 
....................  
.................... short check_bto(int bto) { 
.................... 	if (!input(bto)) { 
*
017A:  MOVFF  26,27
017E:  MOVLW  01
0180:  MOVWF  28
0182:  MOVLW  0F
0184:  MOVWF  2A
0186:  MOVLW  92
0188:  MOVWF  29
018A:  RCALL  010E
018C:  MOVFF  26,27
0190:  MOVLW  0F
0192:  MOVWF  29
0194:  MOVLW  80
0196:  MOVWF  28
0198:  RCALL  014C
019A:  BTFSC  01.0
019C:  BRA    01CE
.................... 		delay_ms(debounce); 
019E:  MOVLW  64
01A0:  MOVWF  27
01A2:  RCALL  00E6
.................... 		return !input(bto); 
01A4:  MOVFF  26,27
01A8:  MOVLW  01
01AA:  MOVWF  28
01AC:  MOVLW  0F
01AE:  MOVWF  2A
01B0:  MOVLW  92
01B2:  MOVWF  29
01B4:  RCALL  010E
01B6:  MOVFF  26,27
01BA:  MOVLW  0F
01BC:  MOVWF  29
01BE:  MOVLW  80
01C0:  MOVWF  28
01C2:  RCALL  014C
01C4:  MOVLW  00
01C6:  BTFSS  01.0
01C8:  MOVLW  01
01CA:  MOVWF  01
01CC:  BRA    01D2
.................... 	} 
.................... 	return FALSE; 
01CE:  MOVLW  00
01D0:  MOVWF  01
.................... } 
01D2:  RETURN 0
....................  
.................... int controle_btos(void) { 
01D4:  CLRF   25
.................... 	short a, b, c; 
.................... 	int ret = 0; 
.................... 	static short ctrl; 
....................  
.................... 	a = check_bto(bto_sobe); 
01D6:  MOVLW  18
01D8:  MOVWF  26
01DA:  RCALL  017A
01DC:  BCF    24.0
01DE:  BTFSC  01.0
01E0:  BSF    24.0
.................... 	b = check_bto(bto_desce); 
01E2:  MOVLW  19
01E4:  MOVWF  26
01E6:  RCALL  017A
01E8:  BCF    24.1
01EA:  BTFSC  01.0
01EC:  BSF    24.1
.................... 	c = check_bto(bto_maual); 
01EE:  MOVLW  04
01F0:  MOVWF  26
01F2:  RCALL  017A
01F4:  BCF    24.2
01F6:  BTFSC  01.0
01F8:  BSF    24.2
....................  
.................... 	if (a && ctrl) { 
01FA:  BTFSS  24.0
01FC:  BRA    020A
01FE:  BTFSS  19.0
0200:  BRA    020A
.................... 		ctrl = FALSE; 
0202:  BCF    19.0
.................... 		ret = cmd_sobe; 
0204:  MOVLW  01
0206:  MOVWF  25
.................... 	} else if (b && ctrl) { 
0208:  BRA    0250
020A:  BTFSS  24.1
020C:  BRA    021A
020E:  BTFSS  19.0
0210:  BRA    021A
.................... 		ctrl = FALSE; 
0212:  BCF    19.0
.................... 		ret = cmd_desce; 
0214:  MOVLW  02
0216:  MOVWF  25
.................... 	} else if (c && ctrl) { 
0218:  BRA    0250
021A:  BTFSS  24.2
021C:  BRA    022A
021E:  BTFSS  19.0
0220:  BRA    022A
.................... 		ctrl = FALSE; 
0222:  BCF    19.0
.................... 		ret = cmd_manual; 
0224:  MOVLW  03
0226:  MOVWF  25
.................... 	} else if (!(a | b | c) && !ctrl) { 
0228:  BRA    0250
022A:  MOVLW  00
022C:  BTFSC  24.0
022E:  MOVLW  01
0230:  MOVWF  27
0232:  MOVLW  00
0234:  BTFSC  24.1
0236:  MOVLW  01
0238:  IORWF  27,W
023A:  MOVWF  28
023C:  MOVLW  00
023E:  BTFSC  24.2
0240:  MOVLW  01
0242:  IORWF  28,W
0244:  BNZ   0250
0246:  BTFSC  19.0
0248:  BRA    0250
.................... 		ctrl = TRUE; 
024A:  BSF    19.0
.................... 		ret = cmd_parar; 
024C:  MOVLW  04
024E:  MOVWF  25
.................... 	} 
....................  
.................... 	return ret; 
0250:  MOVFF  25,01
.................... } 
0254:  GOTO   099C (RETURN)
....................  
....................  
.................... short print; 
.................... long resolucao = 255; 
....................  
.................... #INT_TIMER0 
.................... void isr_timer0() { 
.................... 	clear_interrupt(INT_TIMER0); 
*
00AE:  BCF    FF2.2
.................... 	set_timer0(tempo0); 
00B0:  MOVLW  48
00B2:  MOVWF  FD7
00B4:  MOVLW  E4
00B6:  MOVWF  FD6
.................... 	print = TRUE; 
00B8:  BSF    19.1
.................... } 
....................  
00BA:  BCF    FF2.2
00BC:  GOTO   0060
.................... short r_trig(short clk, int *ctrl) { 
.................... 	if (clk && !*ctrl) { 
*
0258:  MOVF   25,F
025A:  BZ    027E
025C:  MOVFF  27,03
0260:  MOVFF  26,FE9
0264:  MOVFF  27,FEA
0268:  MOVF   FEF,F
026A:  BNZ   027E
.................... 		*ctrl = TRUE; 
026C:  MOVFF  26,FE9
0270:  MOVFF  27,FEA
0274:  MOVLW  01
0276:  MOVWF  FEF
.................... 		return TRUE; 
0278:  MOVWF  01
027A:  BRA    0290
.................... 	} else if (!clk) 
027C:  BRA    028C
027E:  MOVF   25,F
0280:  BNZ   028C
.................... 		*ctrl = FALSE; 
0282:  MOVFF  26,FE9
0286:  MOVFF  27,FEA
028A:  CLRF   FEF
.................... 	return FALSE; 
028C:  MOVLW  00
028E:  MOVWF  01
.................... } 
0290:  RETURN 0
....................  
.................... int main(void) { 
*
092C:  CLRF   FF8
092E:  BCF    FD0.7
0930:  BSF    07.7
0932:  CLRF   FEA
0934:  CLRF   FE9
0936:  BSF    FB8.3
0938:  MOVLW  82
093A:  MOVWF  FAF
093C:  MOVLW  06
093E:  MOVWF  FB0
0940:  MOVLW  A6
0942:  MOVWF  FAC
0944:  MOVLW  90
0946:  MOVWF  FAB
0948:  CLRF   1B
094A:  SETF   1A
094C:  MOVLW  00
094E:  MOVWF  F7E
0950:  BCF    FC1.4
0952:  BCF    FC1.5
0954:  MOVF   F7F,W
0956:  ANDLW  E0
0958:  MOVWF  F7F
095A:  BCF    F79.5
095C:  BCF    F79.4
095E:  CLRF   F7A
0960:  CLRF   F7B
0962:  BCF    19.0
0964:  CLRF   1C
0966:  CLRF   1E
....................  
.................... 	int cmd = 0, ctrl1, aux = 0, ctrl2; 
.................... 	long cont_timer1, max; 
....................  
.................... 	set_timer1(0); 
0968:  CLRF   FCF
096A:  CLRF   FCE
.................... 	setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1); 
096C:  MOVLW  87
096E:  MOVWF  FCD
.................... 	set_timer0(tempo0); 
0970:  MOVLW  48
0972:  MOVWF  FD7
0974:  MOVLW  E4
0976:  MOVWF  FD6
.................... 	setup_timer_0(T0_INTERNAL | T0_DIV_256); 
0978:  MOVLW  87
097A:  MOVWF  FD5
.................... 	clear_interrupt(INT_TIMER0); 
097C:  BCF    FF2.2
.................... 	enable_interrupts(INT_TIMER0 | GLOBAL); 
097E:  MOVLW  E0
0980:  IORWF  FF2,F
.................... 	delay_ms(300); 
0982:  MOVLW  02
0984:  MOVWF  24
0986:  MOVLW  96
0988:  MOVWF  27
098A:  CALL   00E6
098E:  DECFSZ 24,F
0990:  BRA    0986
....................  
.................... 	while (TRUE) { 
....................  
.................... 		cont_timer1 = get_timer1(); 
0992:  MOVF   FCE,W
0994:  MOVWF  20
0996:  MOVFF  FCF,21
.................... 		cmd = controle_btos(); 
099A:  BRA    01D4
099C:  MOVFF  01,1C
....................  
.................... 		if (r_trig((cmd == cmd_sobe), &ctrl2)) { 
09A0:  DECFSZ 1C,W
09A2:  BRA    09A6
09A4:  BRA    09AA
09A6:  MOVLW  00
09A8:  BRA    09AC
09AA:  MOVLW  01
09AC:  MOVWF  24
09AE:  MOVWF  25
09B0:  CLRF   27
09B2:  MOVLW  1F
09B4:  MOVWF  26
09B6:  RCALL  0258
09B8:  MOVF   01,F
09BA:  BZ    09D2
.................... 			output_toggle(PIN_A5); 
09BC:  BCF    F92.5
09BE:  BTG    F89.5
.................... 			printf("\fSobre"); 
09C0:  MOVLW  C0
09C2:  MOVWF  FF6
09C4:  MOVLW  00
09C6:  MOVWF  FF7
09C8:  BRA    0292
.................... 			set_timer0(tempo0); 
09CA:  MOVLW  48
09CC:  MOVWF  FD7
09CE:  MOVLW  E4
09D0:  MOVWF  FD6
.................... 		} 
....................  
.................... 		if (r_trig(!input(canalZ), &ctrl1)) { 
09D2:  BSF    F93.5
09D4:  MOVLW  00
09D6:  BTFSS  F81.5
09D8:  MOVLW  01
09DA:  MOVWF  24
09DC:  MOVWF  25
09DE:  CLRF   27
09E0:  MOVLW  1D
09E2:  MOVWF  26
09E4:  RCALL  0258
09E6:  MOVF   01,F
09E8:  BZ    09FC
.................... 			max = cont_timer1; 
09EA:  MOVFF  21,23
09EE:  MOVFF  20,22
.................... 			set_timer1(0); 
09F2:  CLRF   FCF
09F4:  CLRF   FCE
.................... 			cont_timer1 = 0; 
09F6:  CLRF   21
09F8:  CLRF   20
.................... 			aux++; 
09FA:  INCF   1E,F
.................... 		} 
....................  
.................... 		if (print) { 
09FC:  BTFSS  19.1
09FE:  BRA    0ADC
.................... 			print = FALSE; 
0A00:  BCF    19.1
.................... 			printf("\fTimer 1: %lu %d\nAngulo: %.2f", cont_timer1, aux, 
.................... 					(float) cont_timer1 / resolucao * 360); 
0A02:  MOVFF  21,29
0A06:  MOVFF  20,28
0A0A:  RCALL  02B6
0A0C:  MOVFF  00,24
0A10:  MOVFF  01,25
0A14:  MOVFF  02,26
0A18:  MOVFF  03,27
0A1C:  MOVFF  1B,29
0A20:  MOVFF  1A,28
0A24:  RCALL  02B6
0A26:  MOVFF  27,2B
0A2A:  MOVFF  26,2A
0A2E:  MOVFF  25,29
0A32:  MOVFF  24,28
0A36:  MOVFF  03,2F
0A3A:  MOVFF  02,2E
0A3E:  MOVFF  01,2D
0A42:  MOVFF  00,2C
0A46:  BRA    02EC
0A48:  MOVFF  00,24
0A4C:  MOVFF  01,25
0A50:  MOVFF  02,26
0A54:  MOVFF  03,27
0A58:  MOVFF  03,38
0A5C:  MOVFF  02,37
0A60:  MOVFF  01,36
0A64:  MOVFF  00,35
0A68:  CLRF   3C
0A6A:  CLRF   3B
0A6C:  MOVLW  34
0A6E:  MOVWF  3A
0A70:  MOVLW  87
0A72:  MOVWF  39
0A74:  RCALL  0448
0A76:  MOVFF  00,24
0A7A:  MOVFF  01,25
0A7E:  MOVFF  02,26
0A82:  MOVFF  03,27
0A86:  MOVLW  C8
0A88:  MOVWF  FF6
0A8A:  MOVLW  00
0A8C:  MOVWF  FF7
0A8E:  MOVLW  0A
0A90:  MOVWF  28
0A92:  RCALL  053A
0A94:  MOVLW  10
0A96:  MOVWF  FE9
0A98:  MOVFF  21,29
0A9C:  MOVFF  20,28
0AA0:  BRA    055A
0AA2:  MOVLW  20
0AA4:  BTFSS  F9E.4
0AA6:  BRA    0AA4
0AA8:  MOVWF  FAD
0AAA:  MOVFF  1E,28
0AAE:  MOVLW  18
0AB0:  MOVWF  29
0AB2:  BRA    0628
0AB4:  MOVLW  D8
0AB6:  MOVWF  FF6
0AB8:  MOVLW  00
0ABA:  MOVWF  FF7
0ABC:  MOVLW  09
0ABE:  MOVWF  28
0AC0:  RCALL  053A
0AC2:  MOVLW  89
0AC4:  MOVWF  FE9
0AC6:  MOVFF  27,2B
0ACA:  MOVFF  26,2A
0ACE:  MOVFF  25,29
0AD2:  MOVFF  24,28
0AD6:  MOVLW  02
0AD8:  MOVWF  2C
0ADA:  BRA    07AA
.................... 		} 
.................... 	} 
0ADC:  BRA    0992
....................  
.................... 	return 0; 
0ADE:  MOVLW  00
0AE0:  MOVWF  01
.................... } 
0AE2:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
