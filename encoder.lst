CCS PCH C Compiler, Version 4.140, 21898               02-ago-13 08:55

               Filename:   D:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used:   1194 bytes (4%)
                           Largest free fragment is 31570
               RAM used:   52 (3%) at main() level
                           61 (4%) worst case
               Stack:     3 worst case (1 in main + 2 for interrupts)

*
0000:  GOTO   031E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   0158
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   0172
006C:  BTFSS  F9D.3
006E:  GOTO   0078
0072:  BTFSC  F9E.3
0074:  GOTO   00DC
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVFF  15,FF5
00B2:  MOVFF  16,FF6
00B6:  MOVFF  17,FF7
00BA:  MOVF   04,W
00BC:  MOVFF  06,FE0
00C0:  MOVFF  05,FD8
00C4:  RETFIE 0
.................... /*Ligacao do Encoder 
....................  * 	MR - A 
....................  * 	VM - B 
....................  * 	LR - Z 
....................  * 	AM - VSS 
....................  * 	VD - VDD 
....................  */ 
....................  
.................... #include <18F45k20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #fuses H4 
.................... #use delay(crystal=15MHz, clock=60MHz) 
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use i2c (slave,scl=PIN_C3,sda=PIN_C4,FORCE_HW,FAST=100000) 
*
00C6:  MOVF   FC9,W
00C8:  MOVFF  3C,FC9
00CC:  BSF    FC6.4
00CE:  BCF    F9E.3
00D0:  BTFSC  FC7.0
00D2:  BRA    00D0
00D4:  CLRF   01
00D6:  BTFSC  FC6.4
00D8:  INCF   01,F
00DA:  RETURN 0
....................  
.................... #define canalA		PIN_A4 
.................... #define canalB		PIN_B4 
.................... #define canalZ		PIN_B5 
.................... #define bto_sobe	PIN_D0 
.................... #define bto_desce	PIN_D1 
....................  
.................... static signed long cont, cont1, aux, pulsosRecebido; 
.................... static long sentido, sentido1, max, contTmr, contTmrMax; 
.................... static short ctrl; 
.................... static int estado, lido, primeiraLeitura, segundaLeitura, cmd; 
....................  
.................... #INT_SSP 
.................... void ssp_interrupt() { 
.................... 	estado = i2c_isr_state(); 
00DC:  BTFSC  FC7.5
00DE:  BRA    00E6
00E0:  CLRF   31
00E2:  BTFSC  FC7.2
00E4:  BSF    31.7
00E6:  MOVF   31,W
00E8:  INCF   31,F
00EA:  MOVWF  2C
.................... 	if (estado < 0x80) { 
00EC:  MOVF   2C,W
00EE:  SUBLW  7F
00F0:  BNC   012E
.................... 		lido = i2c_read(); 
00F2:  BCF    FC6.6
00F4:  BTFSS  F9E.3
00F6:  BRA    00F4
00F8:  MOVF   FC9,W
00FA:  BSF    FC6.4
00FC:  MOVWF  2D
.................... 		if (estado == 1) { 
00FE:  DECFSZ 2C,W
0100:  BRA    010A
.................... 			primeiraLeitura = 0; 
0102:  CLRF   2E
.................... 			primeiraLeitura = lido; 
0104:  MOVFF  2D,2E
.................... 		} else if (estado == 2) { 
0108:  BRA    012C
010A:  MOVF   2C,W
010C:  SUBLW  02
010E:  BNZ   0120
.................... 			segundaLeitura = 0; 
0110:  CLRF   2F
.................... 			segundaLeitura = lido; 
0112:  MOVFF  2D,2F
.................... 			pulsosRecebido = make16(primeiraLeitura, segundaLeitura); 
0116:  MOVFF  2E,20
011A:  MOVFF  2F,1F
.................... 		} else if (estado == 3) { 
011E:  BRA    012C
0120:  MOVF   2C,W
0122:  SUBLW  03
0124:  BNZ   012C
.................... 			cmd = 0; 
0126:  CLRF   30
.................... 			cmd = lido; 
0128:  MOVFF  2D,30
.................... 		} 
.................... 	} else if (estado == 0x80) { 
012C:  BRA    0152
012E:  MOVF   2C,W
0130:  SUBLW  80
0132:  BNZ   0152
.................... 		if (primeiraLeitura == 0) { 
0134:  MOVF   2E,F
0136:  BNZ   0144
.................... 			i2c_write(make8(cont, 1)); 
0138:  MOVFF  1A,3B
013C:  MOVFF  1A,3C
0140:  RCALL  00C6
.................... 		} else if (primeiraLeitura == 1) { 
0142:  BRA    0152
0144:  DECFSZ 2E,W
0146:  BRA    0152
.................... 			i2c_write(make8(cont, 0)); 
0148:  MOVFF  19,3B
014C:  MOVFF  19,3C
0150:  RCALL  00C6
.................... 		} 
.................... 	} 
.................... } 
....................  
0152:  BCF    F9E.3
0154:  GOTO   0078
.................... #INT_EXT 
.................... void ext_isr(void) { 
.................... 	clear_interrupt(INT_EXT); 
0158:  BCF    FF2.1
.................... 	if (input_state(canalB)) 
015A:  BTFSS  F81.4
015C:  BRA    0166
.................... 		sentido++; 
015E:  INCF   21,F
0160:  BTFSC  FD8.2
0162:  INCF   22,F
.................... 	else 
0164:  BRA    016C
.................... 		sentido1++; 
0166:  INCF   23,F
0168:  BTFSC  FD8.2
016A:  INCF   24,F
.................... } 
....................  
016C:  BCF    FF2.1
016E:  GOTO   0078
.................... #INT_EXT1 
.................... void ext1_isr(void) { 
.................... 	clear_interrupt(INT_EXT1); 
0172:  BCF    FF0.0
.................... 	sentido = sentido1 = contTmr = 0; 
0174:  CLRF   28
0176:  CLRF   27
0178:  MOVFF  28,24
017C:  MOVFF  27,23
0180:  MOVFF  24,22
0184:  MOVFF  23,21
.................... 	cont = cont1 = 0; 
0188:  CLRF   1C
018A:  CLRF   1B
018C:  MOVFF  1C,1A
0190:  MOVFF  1B,19
.................... 	set_timer0(0); 
0194:  CLRF   FD7
0196:  CLRF   FD6
.................... } 
....................  
0198:  BCF    FF0.0
019A:  GOTO   0078
.................... void main(void) { 
*
031E:  CLRF   FF8
0320:  BCF    FD0.7
0322:  BSF    07.7
0324:  CLRF   FEA
0326:  CLRF   FE9
0328:  BSF    FB8.3
032A:  MOVLW  1A
032C:  MOVWF  FAF
032E:  MOVLW  06
0330:  MOVWF  FB0
0332:  MOVLW  A6
0334:  MOVWF  FAC
0336:  MOVLW  90
0338:  MOVWF  FAB
033A:  BSF    F94.3
033C:  BSF    F94.4
033E:  CLRF   FC8
0340:  MOVLW  36
0342:  MOVWF  FC6
0344:  BSF    FC5.0
0346:  MOVLW  03
0348:  MOVWF  31
034A:  MOVLW  00
034C:  MOVWF  F7E
034E:  BCF    FC1.4
0350:  BCF    FC1.5
0352:  MOVF   F7F,W
0354:  ANDLW  E0
0356:  MOVWF  F7F
0358:  BCF    F79.5
035A:  BCF    F79.4
035C:  CLRF   F7A
035E:  CLRF   F7B
0360:  CLRF   19
0362:  CLRF   1A
0364:  CLRF   1B
0366:  CLRF   1C
0368:  CLRF   1D
036A:  CLRF   1E
036C:  CLRF   1F
036E:  CLRF   20
0370:  CLRF   21
0372:  CLRF   22
0374:  CLRF   23
0376:  CLRF   24
0378:  CLRF   25
037A:  CLRF   26
037C:  CLRF   27
037E:  CLRF   28
0380:  CLRF   29
0382:  CLRF   2A
0384:  BCF    2B.0
0386:  CLRF   2C
0388:  CLRF   2D
038A:  CLRF   2E
038C:  CLRF   2F
038E:  CLRF   30
.................... 	set_timer0(0); 
0390:  CLRF   FD7
0392:  CLRF   FD6
.................... 	setup_timer_0(T0_EXT_L_TO_H); 
0394:  MOVLW  A0
0396:  MOVWF  FD5
.................... 	port_b_pullups(TRUE); 
0398:  MOVLW  01
039A:  MOVWF  F7C
039C:  BCF    FF1.7
.................... 	clear_interrupt(INT_EXT); 
039E:  BCF    FF2.1
.................... 	clear_interrupt(INT_EXT1); 
03A0:  BCF    FF0.0
.................... 	enable_interrupts(INT_EXT_H2L); 
03A2:  BSF    FF2.4
03A4:  BCF    FF1.6
.................... 	enable_interrupts(INT_EXT1_H2L); 
03A6:  BSF    FF0.3
03A8:  BCF    FF1.5
.................... 	enable_interrupts(GLOBAL); 
03AA:  MOVLW  C0
03AC:  IORWF  FF2,F
.................... 	while (TRUE) { 
.................... 		contTmr = get_timer0(); 
03AE:  MOVF   FD6,W
03B0:  MOVWF  27
03B2:  MOVFF  FD7,28
.................... 		/*if (!input(bto_sobe) && input(bto_desce)) { 
.................... 		 cont = cont1 + get_timer0(); 
.................... 		 } 
.................... 		 if (!input(bto_desce) && input(bto_sobe)) { 
.................... 		 cont = cont1 - get_timer0(); 
.................... 		 } 
.................... 		 if (input(bto_sobe) && input(bto_desce) && ctrl) { 
.................... 		 set_timer0(0); 
.................... 		 cont1 = cont; 
.................... 		 } else 
.................... 		 ctrl = TRUE;*/ 
.................... 		if (aux != contTmr + sentido + sentido1) { 
03B6:  MOVF   21,W
03B8:  ADDWF  27,W
03BA:  MOVWF  32
03BC:  MOVF   22,W
03BE:  ADDWFC 28,W
03C0:  MOVWF  33
03C2:  MOVF   23,W
03C4:  ADDWF  32,W
03C6:  MOVWF  01
03C8:  MOVF   24,W
03CA:  ADDWFC 33,W
03CC:  MOVWF  03
03CE:  MOVF   01,W
03D0:  SUBWF  1D,W
03D2:  BNZ   03DC
03D4:  MOVF   03,W
03D6:  SUBWF  1E,W
03D8:  BTFSC  FD8.2
03DA:  BRA    04AA
.................... 			aux = contTmr + sentido + sentido1; 
03DC:  MOVF   21,W
03DE:  ADDWF  27,W
03E0:  MOVWF  32
03E2:  MOVF   22,W
03E4:  ADDWFC 28,W
03E6:  MOVWF  33
03E8:  MOVF   23,W
03EA:  ADDWF  32,W
03EC:  MOVWF  01
03EE:  MOVF   24,W
03F0:  ADDWFC 33,W
03F2:  MOVFF  01,1D
03F6:  MOVWF  1E
.................... 			if (contTmrMax < contTmr) 
03F8:  MOVF   2A,W
03FA:  SUBWF  28,W
03FC:  BNC   040E
03FE:  BNZ   0406
0400:  MOVF   27,W
0402:  SUBWF  29,W
0404:  BC    040E
.................... 				contTmrMax = contTmr; 
0406:  MOVFF  28,2A
040A:  MOVFF  27,29
.................... 			if (max < sentido) 
040E:  MOVF   26,W
0410:  SUBWF  22,W
0412:  BNC   0426
0414:  BNZ   041C
0416:  MOVF   21,W
0418:  SUBWF  25,W
041A:  BC    0426
.................... 				max = sentido; 
041C:  MOVFF  22,26
0420:  MOVFF  21,25
.................... 			else if (max < sentido1) 
0424:  BRA    043C
0426:  MOVF   26,W
0428:  SUBWF  24,W
042A:  BNC   043C
042C:  BNZ   0434
042E:  MOVF   23,W
0430:  SUBWF  25,W
0432:  BC    043C
.................... 				max = sentido1; 
0434:  MOVFF  24,26
0438:  MOVFF  23,25
.................... 			printf("\f%Lu %Lu\n%Ld %Ld %Ld", contTmr, contTmrMax, sentido, 
.................... 					sentido1, max); 
043C:  MOVLW  0C
043E:  BTFSS  F9E.4
0440:  BRA    043E
0442:  MOVWF  FAD
0444:  MOVLW  10
0446:  MOVWF  FE9
0448:  MOVFF  28,33
044C:  MOVFF  27,32
0450:  RCALL  019E
0452:  MOVLW  20
0454:  BTFSS  F9E.4
0456:  BRA    0454
0458:  MOVWF  FAD
045A:  MOVLW  10
045C:  MOVWF  FE9
045E:  MOVFF  2A,33
0462:  MOVFF  29,32
0466:  RCALL  019E
0468:  MOVLW  0A
046A:  BTFSS  F9E.4
046C:  BRA    046A
046E:  MOVWF  FAD
0470:  MOVLW  10
0472:  MOVWF  FE9
0474:  MOVFF  22,33
0478:  MOVFF  21,32
047C:  RCALL  0242
047E:  MOVLW  20
0480:  BTFSS  F9E.4
0482:  BRA    0480
0484:  MOVWF  FAD
0486:  MOVLW  10
0488:  MOVWF  FE9
048A:  MOVFF  24,33
048E:  MOVFF  23,32
0492:  RCALL  0242
0494:  MOVLW  20
0496:  BTFSS  F9E.4
0498:  BRA    0496
049A:  MOVWF  FAD
049C:  MOVLW  10
049E:  MOVWF  FE9
04A0:  MOVFF  26,33
04A4:  MOVFF  25,32
04A8:  RCALL  0242
.................... 		} 
.................... 	} 
04AA:  BRA    03AE
.................... } 
04AC:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
