CCS PCH C Compiler, Version 4.140, 21898               01-ago-13 10:59

               Filename:   D:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used:   782 bytes (2%)
                           Largest free fragment is 31986
               RAM used:   11 (1%) at main() level
                           20 (1%) worst case
               Stack:     2 locations

*
0000:  GOTO   0250
.................... #include <18F45K20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #fuses H4,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(crystal=15MHz, clock=60MHz) 
0226:  CLRF   FEA
0228:  MOVLW  09
022A:  MOVWF  FE9
022C:  MOVF   FEF,W
022E:  BZ    024C
0230:  MOVLW  13
0232:  MOVWF  01
0234:  CLRF   00
0236:  DECFSZ 00,F
0238:  BRA    0236
023A:  DECFSZ 01,F
023C:  BRA    0234
023E:  MOVLW  73
0240:  MOVWF  00
0242:  DECFSZ 00,F
0244:  BRA    0242
0246:  NOP   
0248:  DECFSZ FEF,F
024A:  BRA    0230
024C:  GOTO   0306 (RETURN)
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... #include "as5040.h" 
.................... /* 
....................  * as5040.h 
....................  * 
....................  *  Created on: 30/03/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #ifndef AS5040_H_ 
.................... #define AS5040_H_ 
....................  
.................... #define clockwise			0x0000 
.................... #define couter_clockwise	0x8000 
.................... #define direction_mask		0x8000 
.................... #define zero_mask			0x7FE0 
.................... #define index1				0x0000 
.................... #define index3				0x0010 
.................... #define index_mask			0x0010 
.................... #define quatrature_mode		0x0001 
.................... #define step_direction_mode	0x0002 
.................... #define brushless_dc_mode	0x0003 
.................... #define mode_mask			0x0003 
.................... #define _10_bit_resolution	0x0000 
.................... #define _9_bit_resolution	0x0004 
.................... #define _8_bit_resolution	0x0008 
.................... #define _7_bit_resolution	0x000C 
.................... #define resolution_mask		0x000C 
.................... #define DO_PIN				PIN_C0 
.................... #define DI_PIN				PIN_A4 
.................... #define CLK_PIN				PIN_B4 
.................... #define SLAVE_SELECT		PIN_B5 
....................  
.................... #use spi(MASTER, DI=DI_PIN, DO=DO_PIN, CLK=CLK_PIN, MODE=0,  BAUD=1000000, BITS=16, DATA_HOLD=1) 
*
0010:  MOVF   0C,W
0012:  SUBLW  10
0014:  BZ    0020
0016:  MOVWF  0D
0018:  RLCF   0A,F
001A:  RLCF   0B,F
001C:  DECFSZ 0D,F
001E:  BRA    0018
0020:  BSF    F92.4
0022:  BCF    F94.0
0024:  BCF    F93.4
0026:  BCF    F8A.4
0028:  MOVFF  0C,0D
002C:  BTFSS  0B.7
002E:  BCF    F8B.0
0030:  BTFSC  0B.7
0032:  BSF    F8B.0
0034:  RLCF   0A,F
0036:  RLCF   0B,F
0038:  MOVLW  05
003A:  MOVWF  0E
003C:  DECFSZ 0E,F
003E:  BRA    003C
0040:  BSF    F8A.4
0042:  NOP   
0044:  RLCF   01,F
0046:  RLCF   02,F
0048:  BTFSS  F80.4
004A:  BCF    01.0
004C:  BTFSC  F80.4
004E:  BSF    01.0
0050:  BCF    F8A.4
0052:  DECFSZ 0D,F
0054:  BRA    002C
0056:  GOTO   0068 (RETURN)
....................  
.................... static long setup; 
....................  
.................... void write_encoder(long data) { 
....................  
.................... 	register int aux = 0; 
.................... 	register int cont = 0; 
....................  
.................... 	output_high(DO_PIN); 
.................... 	output_low(CLK_PIN); 
.................... 	delay_us(10); 
.................... 	output_high(SLAVE_SELECT); 
.................... 	spi_xfer(data); 
.................... 	output_low(CLK_PIN); 
.................... 	output_low(DO_PIN); 
.................... 	delay_us(2); 
.................... 	for (cont = 0; cont < 16; ++cont) { 
.................... 		output_high(DO_PIN); 
.................... 		delay_us(1); 
.................... 		output_high(CLK_PIN); 
.................... 		delay_us(2); 
.................... 		output_low(CLK_PIN); 
.................... 		delay_us(1); 
.................... 		output_low(DO_PIN); 
.................... 	} 
.................... 	output_low(SLAVE_SELECT); 
.................... } 
....................  
.................... void setup_encoder(long new_setup, int zero_mark) { 
.................... 	if (new_setup & direction_mask) { 
.................... 		setup |= direction_mask; 
.................... 	} 
.................... 	if (new_setup & index_mask) { 
.................... 		setup |= index_mask; 
.................... 	} 
.................... 	if (new_setup & mode_mask) { 
.................... 		switch (new_setup & mode_mask) { 
.................... 		case quatrature_mode: 
.................... 			setup |= quatrature_mode; 
.................... 			break; 
.................... 		case step_direction_mode: 
.................... 			setup |= step_direction_mode; 
.................... 			break; 
.................... 		case brushless_dc_mode: 
.................... 			setup |= brushless_dc_mode; 
.................... 			break; 
.................... 		default: 
.................... 			break; 
.................... 		} 
.................... 	} 
.................... 	if (new_setup & resolution_mask) { 
.................... 		switch (new_setup & resolution_mask) { 
.................... 		case _9_bit_resolution: 
.................... 			setup |= _9_bit_resolution; 
.................... 			break; 
.................... 		case _8_bit_resolution: 
.................... 			setup |= _8_bit_resolution; 
.................... 			break; 
.................... 		case _7_bit_resolution: 
.................... 			setup |= _7_bit_resolution; 
.................... 			break; 
.................... 		default: 
.................... 			break; 
.................... 		} 
.................... 	} 
.................... 	if (zero_mark && zero_mark < 1024) { 
.................... 		setup |= (long) zero_mark << 5; 
.................... 	} 
.................... 	output_high(DO_PIN); 
.................... 	delay_us(2); 
.................... 	output_high(SLAVE_SELECT); 
.................... 	delay_us(2); 
.................... 	spi_xfer(setup); 
.................... } 
....................  
.................... void clear_bus(void) { 
.................... 	output_low(SLAVE_SELECT); 
.................... 	output_low(CLK_PIN); 
.................... 	output_low(DO_PIN); 
.................... 	output_low(DI_PIN); 
.................... } 
....................  
.................... #endif /* AS5040_H_ */ 
....................  
....................  
.................... static long leitura; 
....................  
.................... long readDevice(void) { 
.................... 	long saida; 
....................  
.................... 	output_low(SLAVE_SELECT); 
005A:  BCF    F93.5
005C:  BCF    F8A.5
.................... 	saida = spi_xfer(0); 
005E:  CLRF   0B
0060:  CLRF   0A
0062:  MOVLW  10
0064:  MOVWF  0C
0066:  BRA    0010
0068:  MOVF   01,W
006A:  MOVFF  02,09
006E:  MOVFF  01,08
.................... 	output_high(SLAVE_SELECT); 
0072:  BCF    F93.5
0074:  BSF    F8A.5
....................  
.................... 	return saida; 
0076:  MOVFF  08,01
007A:  MOVFF  09,02
.................... } 
007E:  GOTO   0296 (RETURN)
....................  
.................... void main(void) { 
*
0250:  CLRF   FF8
0252:  BCF    FD0.7
0254:  CLRF   FEA
0256:  CLRF   FE9
0258:  BSF    FB8.3
025A:  MOVLW  1A
025C:  MOVWF  FAF
025E:  MOVLW  06
0260:  MOVWF  FB0
0262:  MOVLW  A6
0264:  MOVWF  FAC
0266:  MOVLW  90
0268:  MOVWF  FAB
026A:  BSF    F92.4
026C:  BCF    F94.0
026E:  BCF    F93.4
0270:  BCF    F8A.4
0272:  MOVLW  00
0274:  MOVWF  F7E
0276:  BCF    FC1.4
0278:  BCF    FC1.5
027A:  MOVF   F7F,W
027C:  ANDLW  E0
027E:  MOVWF  F7F
0280:  BCF    F79.5
0282:  BCF    F79.4
0284:  CLRF   F7A
0286:  CLRF   F7B
0288:  CLRF   04
028A:  CLRF   05
028C:  CLRF   06
028E:  CLRF   07
.................... 	output_high(SLAVE_SELECT); 
0290:  BCF    F93.5
0292:  BSF    F8A.5
.................... 	while (TRUE) { 
.................... 		leitura = readDevice(); 
0294:  BRA    005A
0296:  MOVFF  02,07
029A:  MOVFF  01,06
.................... 		printf("\f%Lu  -  %d", leitura >> 6, (int) (leitura & 0x0006) >> 1); 
029E:  RRCF   07,W
02A0:  MOVWF  09
02A2:  RRCF   06,W
02A4:  MOVWF  08
02A6:  RRCF   09,F
02A8:  RRCF   08,F
02AA:  RRCF   09,F
02AC:  RRCF   08,F
02AE:  RRCF   09,F
02B0:  RRCF   08,F
02B2:  RRCF   09,F
02B4:  RRCF   08,F
02B6:  RRCF   09,F
02B8:  RRCF   08,F
02BA:  MOVLW  03
02BC:  ANDWF  09,F
02BE:  MOVF   06,W
02C0:  ANDLW  06
02C2:  MOVWF  00
02C4:  CLRF   03
02C6:  MOVF   00,W
02C8:  BCF    FD8.0
02CA:  RRCF   00,W
02CC:  MOVWF  0A
02CE:  MOVLW  0C
02D0:  BTFSS  F9E.4
02D2:  BRA    02D0
02D4:  MOVWF  FAD
02D6:  MOVLW  10
02D8:  MOVWF  FE9
02DA:  MOVFF  09,0C
02DE:  MOVFF  08,0B
02E2:  BRA    0082
02E4:  MOVLW  08
02E6:  MOVWF  FF6
02E8:  MOVLW  00
02EA:  MOVWF  FF7
02EC:  MOVLW  05
02EE:  MOVWF  0B
02F0:  BRA    0128
02F2:  MOVFF  0A,0B
02F6:  MOVLW  18
02F8:  MOVWF  0C
02FA:  BRA    0172
.................... 		delay_ms(500); 
02FC:  MOVLW  02
02FE:  MOVWF  08
0300:  MOVLW  FA
0302:  MOVWF  09
0304:  BRA    0226
0306:  DECFSZ 08,F
0308:  BRA    0300
.................... 	} 
030A:  BRA    0294
.................... } 
030C:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
