CCS PCH C Compiler, Version 4.124, 5967               22-mar-13 14:31

               Filename: E:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used: 820 bytes (3%)
                         Largest free fragment is 31948
               RAM used: 12 (1%) at main() level
                         21 (1%) worst case
               Stack:    2 locations

*
0000:  GOTO   0258
.................... #include <18F45K20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #fuses H4,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(crystal=15MHz, clock=60MHz) 
*
0012:  CLRF   FEA
0014:  MOVLW  0A
0016:  MOVWF  FE9
0018:  MOVF   FEF,W
001A:  BZ    0038
001C:  MOVLW  13
001E:  MOVWF  01
0020:  CLRF   00
0022:  DECFSZ 00,F
0024:  BRA    0022
0026:  DECFSZ 01,F
0028:  BRA    0020
002A:  MOVLW  73
002C:  MOVWF  00
002E:  DECFSZ 00,F
0030:  BRA    002E
0032:  NOP   
0034:  DECFSZ FEF,F
0036:  BRA    001C
0038:  RETURN 0
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use spi(MASTER, DI=PIN_C4, DO=PIN_C5, CLK=PIN_C3, MODE=0,  BAUD=2000000, BITS=16, DATA_HOLD=1) 
*
004E:  MOVF   0B,W
0050:  SUBLW  10
0052:  BZ    005E
0054:  MOVWF  0C
0056:  RLCF   09,F
0058:  RLCF   0A,F
005A:  DECFSZ 0C,F
005C:  BRA    0056
005E:  BSF    F94.4
0060:  BCF    F94.5
0062:  BCF    F94.3
0064:  BCF    F8B.3
0066:  MOVFF  0B,0C
006A:  BTFSS  0A.7
006C:  BCF    F8B.5
006E:  BTFSC  0A.7
0070:  BSF    F8B.5
0072:  RLCF   09,F
0074:  RLCF   0A,F
0076:  MOVLW  05
0078:  MOVWF  0D
007A:  DECFSZ 0D,F
007C:  BRA    007A
007E:  BSF    F8B.3
0080:  RLCF   01,F
0082:  RLCF   02,F
0084:  BTFSS  F82.4
0086:  BCF    01.0
0088:  BTFSC  F82.4
008A:  BSF    01.0
008C:  BCF    F8B.3
008E:  DECFSZ 0C,F
0090:  BRA    006A
0092:  GOTO   02A6 (RETURN)
....................  
.................... #define SLAVE_SELECT PIN_A5 
.................... #include "as5040.h" 
.................... /* 
....................  * as5040.h 
....................  * 
....................  *  Created on: 30/03/2012 
....................  *      Author: cuki 
....................  */ 
....................  
.................... #ifndef AS5040_H_ 
.................... #define AS5040_H_ 
....................  
.................... #define clockwise 0x0000 
.................... #define couter_clockwise 0x8000 
.................... #define direction_mask 0x8000 
.................... #define zero_mask 0x7FE0 
.................... #define index1 0x0000 
.................... #define index3 0x0010 
.................... #define index_mask 0x0010 
.................... #define quatrature_mode	0x0001 
.................... #define step_direction_mode 0x0002 
.................... #define brushless_dc_mode	0x0003 
.................... #define mode_mask 0x0003 
.................... #define _10_bit_resolution 0x0000 
.................... #define _9_bit_resolution 0x0004 
.................... #define _8_bit_resolution 0x0008 
.................... #define _7_bit_resolution 0x000C 
.................... #define resolution_mask	0x000C 
.................... #define DO_PIN PIN_C5 
.................... #define DI_PIN PIN_C4 
.................... #define CLK_PIN PIN_C3 
.................... #ifndef SLAVE_SELECT 
.................... #define SLAVE_SELECT PIN_A5 
.................... #endif 
....................  
.................... long setup; 
....................  
.................... void write_encoder(long data) { 
....................  
.................... 	register int aux = 0; 
.................... 	register int cont = 0; 
....................  
.................... 	output_high(DO_PIN); 
.................... 	output_low(CLK_PIN); 
.................... 	delay_us(10); 
.................... 	output_high(SLAVE_SELECT); 
.................... 	spi_xfer(data); 
.................... 	output_low(CLK_PIN); 
.................... 	for (cont = 0; cont < 16; ++cont) { 
.................... 		output_high(DO_PIN); 
.................... 		delay_us(2); 
.................... 		output_high(CLK_PIN); 
.................... 		delay_us(3); 
.................... 		output_low(CLK_PIN); 
.................... 		delay_us(2); 
.................... 		output_low(DO_PIN); 
.................... 	} 
.................... 	output_low(SLAVE_SELECT); 
.................... } 
....................  
.................... void setup_encoder(long new_setup, int zero_mark) { 
....................  
.................... 	if (new_setup & direction_mask) { 
.................... 		setup |= direction_mask; 
.................... 	} 
.................... 	if (new_setup & index_mask) { 
.................... 		setup |= index_mask; 
.................... 	} 
.................... 	if (new_setup & mode_mask) { 
.................... 		switch (new_setup & mode_mask) { 
.................... 		case quatrature_mode: 
.................... 			setup |= quatrature_mode; 
.................... 			break; 
.................... 		case step_direction_mode: 
.................... 			setup |= step_direction_mode; 
.................... 			break; 
.................... 		case brushless_dc_mode: 
.................... 			setup |= brushless_dc_mode; 
.................... 			break; 
.................... 		default: 
.................... 			break; 
.................... 		} 
.................... 	} 
.................... 	if (new_setup & resolution_mask) 
.................... 		switch (new_setup & resolution_mask) { 
.................... 		case _9_bit_resolution: 
.................... 			setup |= _9_bit_resolution; 
.................... 			break; 
.................... 		case _8_bit_resolution: 
.................... 			setup |= _8_bit_resolution; 
.................... 			break; 
.................... 		case _7_bit_resolution: 
.................... 			setup |= _7_bit_resolution; 
.................... 			break; 
.................... 		default: 
.................... 			break; 
.................... 		} 
.................... 	if (zero_mark && zero_mark < 1024) { 
.................... 		setup |= (long) zero_mark << 5; 
.................... 	} 
....................  
.................... 	write_encoder(setup); 
.................... } 
....................  
.................... void clear_bus(void) { 
.................... 	output_low(SLAVE_SELECT); 
*
003A:  BCF    F92.5
003C:  BCF    F89.5
.................... 	output_low(CLK_PIN); 
003E:  BCF    F94.3
0040:  BCF    F8B.3
.................... 	output_low(DO_PIN); 
0042:  BCF    F94.5
0044:  BCF    F8B.5
.................... 	output_low(DI_PIN); 
0046:  BCF    F94.4
0048:  BCF    F8B.4
.................... } 
004A:  GOTO   0298 (RETURN)
....................  
.................... #endif /* AS5040_H_ */ 
....................  
....................  
.................... long leitura; 
.................... int ctrl; 
....................  
.................... void main(void) { 
*
0258:  CLRF   FF8
025A:  BCF    FD0.7
025C:  CLRF   FEA
025E:  CLRF   FE9
0260:  BSF    FB8.3
0262:  MOVLW  1A
0264:  MOVWF  FAF
0266:  MOVLW  06
0268:  MOVWF  FB0
026A:  MOVLW  A6
026C:  MOVWF  FAC
026E:  MOVLW  90
0270:  MOVWF  FAB
0272:  BSF    F94.4
0274:  BCF    F94.5
0276:  BCF    F94.3
0278:  BCF    F8B.3
027A:  MOVLW  00
027C:  MOVWF  F7E
027E:  BCF    FC1.4
0280:  BCF    FC1.5
0282:  MOVF   F7F,W
0284:  ANDLW  E0
0286:  MOVWF  F7F
0288:  BCF    F79.5
028A:  BCF    F79.4
028C:  CLRF   F7A
028E:  CLRF   F7B
.................... 	delay_ms(100); 
0290:  MOVLW  64
0292:  MOVWF  0A
0294:  RCALL  0012
.................... 	clear_bus(); 
0296:  BRA    003A
.................... //	setup_encoder(couter_clockwise | _7_bit_resolution | step_direction_mode, 
.................... //			64); 
.................... //	printf("\n\rReboot"); 
.................... //	delay_ms(100); 
.................... //	sleep(); 
....................  
.................... 	while (TRUE) { 
....................  
.................... 		output_low(SLAVE_SELECT); 
0298:  BCF    F92.5
029A:  BCF    F89.5
.................... 		leitura = spi_xfer(0); 
029C:  CLRF   0A
029E:  CLRF   09
02A0:  MOVLW  10
02A2:  MOVWF  0B
02A4:  BRA    004E
02A6:  MOVF   01,W
02A8:  MOVFF  02,07
02AC:  MOVFF  01,06
.................... 		output_high(SLAVE_SELECT); 
02B0:  BCF    F92.5
02B2:  BSF    F89.5
.................... 		printf("%Lu  -  %d \n\r", leitura >> 6, (int) (leitura & 0x0006) >> 1); 
02B4:  RRCF   07,W
02B6:  MOVWF  0A
02B8:  RRCF   06,W
02BA:  MOVWF  09
02BC:  RRCF   0A,F
02BE:  RRCF   09,F
02C0:  RRCF   0A,F
02C2:  RRCF   09,F
02C4:  RRCF   0A,F
02C6:  RRCF   09,F
02C8:  RRCF   0A,F
02CA:  RRCF   09,F
02CC:  RRCF   0A,F
02CE:  RRCF   09,F
02D0:  MOVLW  03
02D2:  ANDWF  0A,F
02D4:  MOVF   06,W
02D6:  ANDLW  06
02D8:  MOVWF  00
02DA:  CLRF   03
02DC:  MOVF   00,W
02DE:  BCF    FD8.0
02E0:  RRCF   00,W
02E2:  MOVWF  0B
02E4:  MOVLW  10
02E6:  MOVWF  FE9
02E8:  MOVFF  0A,0D
02EC:  MOVFF  09,0C
02F0:  BRA    0096
02F2:  MOVLW  07
02F4:  MOVWF  FF6
02F6:  MOVLW  00
02F8:  MOVWF  FF7
02FA:  MOVLW  05
02FC:  MOVWF  0C
02FE:  BRA    013C
0300:  MOVFF  0B,0C
0304:  MOVLW  1F
0306:  MOVWF  0D
0308:  BRA    0186
030A:  MOVLW  20
030C:  BTFSS  F9E.4
030E:  BRA    030C
0310:  MOVWF  FAD
0312:  MOVLW  0A
0314:  BTFSS  F9E.4
0316:  BRA    0314
0318:  MOVWF  FAD
031A:  MOVLW  0D
031C:  BTFSS  F9E.4
031E:  BRA    031C
0320:  MOVWF  FAD
.................... 		delay_ms(500); 
0322:  MOVLW  02
0324:  MOVWF  09
0326:  MOVLW  FA
0328:  MOVWF  0A
032A:  RCALL  0012
032C:  DECFSZ 09,F
032E:  BRA    0326
.................... 	} 
0330:  BRA    0298
.................... } 
0332:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
