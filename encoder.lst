CCS PCH C Compiler, Version 4.140, 31805               25-fev-14 08:07

               Filename:   D:\Eletronica\Projetos\Encoder\encoder.lst

               ROM used:   1846 bytes (6%)
                           Largest free fragment is 30922
               RAM used:   47 (3%) at main() level
                           73 (5%) worst case
               Stack:     2 locations

*
0000:  GOTO   05E6
.................... /*Ligacao do Encoder 
....................  * 	MR - A 
....................  * 	VM - B 
....................  * 	LR - Z 
....................  * 	AM - VSS 
....................  * 	VD - VDD 
....................  */ 
....................  
.................... /*Quando encoder não programado: 
....................  * nr maximo de pulsos... 
....................  * no pino T0CLK : 128 
....................  * no pino EXT:	255 
....................  */ 
....................  
.................... #include <18F45k20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #FUSES H4 
.................... #use delay(crystal=16MHz, clock=64MHz) 
*
0022:  CLRF   FEA
0024:  MOVLW  2C
0026:  MOVWF  FE9
0028:  MOVF   FEF,W
002A:  BZ    0048
002C:  MOVLW  14
002E:  MOVWF  01
0030:  CLRF   00
0032:  DECFSZ 00,F
0034:  BRA    0032
0036:  DECFSZ 01,F
0038:  BRA    0030
003A:  MOVLW  BF
003C:  MOVWF  00
003E:  DECFSZ 00,F
0040:  BRA    003E
0042:  BRA    0044
0044:  DECFSZ FEF,F
0046:  BRA    002C
0048:  RETURN 0
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use i2c (slave,scl=PIN_C3,sda=PIN_C4,FORCE_HW,FAST=100000) 
....................  
.................... #define canalA		PIN_B0 
.................... #define canalB		PIN_B4 
.................... #define canalZ		PIN_B5 
.................... #define bto_sobe	PIN_D0 
.................... #define bto_desce	PIN_D1 
.................... #define bto_maual	PIN_A4 
.................... #define cmd_sobe	1 
.................... #define cmd_desce	2 
.................... #define cmd_manual	3 
.................... #define cmd_parar	4 
.................... #define debounce	100 
....................  
.................... short ctrl; 
.................... int cont = 0; 
.................... char str[32]; 
....................  
.................... short check_bto(int bto) { 
.................... 	if (!input(bto)) { 
.................... 		delay_ms(debounce); 
.................... 		return !input(bto); 
.................... 	} 
.................... 	return FALSE; 
.................... } 
....................  
.................... int controle_btos(void) { 
.................... 	short a, b, c; 
.................... 	int ret = 0; 
....................  
.................... 	a = check_bto(bto_sobe); 
.................... 	b = check_bto(bto_desce); 
.................... 	c = check_bto(bto_maual); 
....................  
.................... 	if (a && ctrl) { 
.................... 		ctrl = FALSE; 
.................... 		strcpy(str, "Pressionado Bto\nSobe"); 
.................... 		ret = cmd_sobe; 
.................... 	} else if (b && ctrl) { 
.................... 		ctrl = FALSE; 
.................... 		strcpy(str, "Pressionado Bto\nDesce"); 
.................... 		ret = cmd_desce; 
.................... 	} else if (c && ctrl) { 
.................... 		ctrl = FALSE; 
.................... 		strcpy(str, "Pressionado Bto\nManual"); 
.................... 		ret = cmd_manual; 
.................... 	} else if (!(a || b || c) && !ctrl) { 
.................... 		ctrl = TRUE; 
.................... 		strcpy(str, "Botoes Soltos\n"); 
.................... 		ret = cmd_parar; 
.................... 	} 
....................  
.................... 	return ret; 
.................... } 
....................  
.................... int main(void) { 
*
05E6:  CLRF   FF8
05E8:  BCF    FD0.7
05EA:  CLRF   FEA
05EC:  CLRF   FE9
05EE:  BSF    FB8.3
05F0:  MOVLW  82
05F2:  MOVWF  FAF
05F4:  MOVLW  06
05F6:  MOVWF  FB0
05F8:  MOVLW  A6
05FA:  MOVWF  FAC
05FC:  MOVLW  90
05FE:  MOVWF  FAB
0600:  BSF    F94.3
0602:  BSF    F94.4
0604:  CLRF   FC8
0606:  MOVLW  36
0608:  MOVWF  FC6
060A:  BSF    FC5.0
060C:  CLRF   05
060E:  MOVLW  00
0610:  MOVWF  F7E
0612:  BCF    FC1.4
0614:  BCF    FC1.5
0616:  MOVF   F7F,W
0618:  ANDLW  E0
061A:  MOVWF  F7F
061C:  BCF    F79.5
061E:  BCF    F79.4
0620:  CLRF   F7A
0622:  CLRF   F7B
0624:  CLRF   26
....................  
.................... 	int cmd = 0; 
.................... 	long cont_timer1, aux; 
....................  
.................... 	set_timer1(0); 
0626:  CLRF   FCF
0628:  CLRF   FCE
.................... 	setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
062A:  MOVLW  85
062C:  MOVWF  FCD
.................... 	delay_ms(300); 
062E:  MOVLW  02
0630:  MOVWF  2B
0632:  MOVLW  96
0634:  MOVWF  2C
0636:  RCALL  0022
0638:  DECFSZ 2B,F
063A:  BRA    0632
....................  
.................... 	while (TRUE) { 
.................... 		cont_timer1 = get_timer1(); 
063C:  MOVF   FCE,W
063E:  MOVWF  27
0640:  MOVFF  FCF,28
.................... //		if (cont_timer1 > 1024) { 
.................... //			set_timer1(0); 
.................... //			cont_timer1 = 0; 
.................... //		} 
.................... 		if (aux != cont_timer1) { 
0644:  MOVF   27,W
0646:  SUBWF  29,W
0648:  BNZ   0650
064A:  MOVF   28,W
064C:  SUBWF  2A,W
064E:  BZ    072E
.................... 			aux = cont_timer1; 
0650:  MOVFF  28,2A
0654:  MOVFF  27,29
.................... 			printf("Timer 1: %lu\r\nAngulo: %.2f\n\r", cont_timer1, 
.................... 					(float) cont_timer1 / 1024 * 360); 
0658:  MOVFF  28,2C
065C:  MOVFF  27,2B
0660:  BRA    004A
0662:  MOVFF  00,2B
0666:  MOVFF  01,2C
066A:  MOVFF  02,2D
066E:  MOVFF  03,2E
0672:  MOVFF  03,32
0676:  MOVFF  02,31
067A:  MOVFF  01,30
067E:  MOVFF  00,2F
0682:  CLRF   36
0684:  CLRF   35
0686:  CLRF   34
0688:  MOVLW  89
068A:  MOVWF  33
068C:  BRA    0082
068E:  MOVFF  00,2B
0692:  MOVFF  01,2C
0696:  MOVFF  02,2D
069A:  MOVFF  03,2E
069E:  MOVFF  03,3F
06A2:  MOVFF  02,3E
06A6:  MOVFF  01,3D
06AA:  MOVFF  00,3C
06AE:  CLRF   43
06B0:  CLRF   42
06B2:  MOVLW  34
06B4:  MOVWF  41
06B6:  MOVLW  87
06B8:  MOVWF  40
06BA:  RCALL  01DE
06BC:  MOVFF  00,2B
06C0:  MOVFF  01,2C
06C4:  MOVFF  02,2D
06C8:  MOVFF  03,2E
06CC:  MOVLW  04
06CE:  MOVWF  FF6
06D0:  MOVLW  00
06D2:  MOVWF  FF7
06D4:  MOVLW  09
06D6:  MOVWF  2F
06D8:  RCALL  02D0
06DA:  MOVLW  10
06DC:  MOVWF  FE9
06DE:  MOVFF  28,30
06E2:  MOVFF  27,2F
06E6:  BRA    02F0
06E8:  MOVLW  10
06EA:  MOVWF  FF6
06EC:  MOVLW  00
06EE:  MOVWF  FF7
06F0:  MOVLW  0A
06F2:  MOVWF  2F
06F4:  RCALL  02D0
06F6:  MOVLW  89
06F8:  MOVWF  FE9
06FA:  MOVFF  2E,32
06FE:  MOVFF  2D,31
0702:  MOVFF  2C,30
0706:  MOVFF  2B,2F
070A:  MOVLW  02
070C:  MOVWF  33
070E:  BRA    0464
0710:  MOVLW  0A
0712:  BTFSS  F9E.4
0714:  BRA    0712
0716:  MOVWF  FAD
0718:  MOVLW  0D
071A:  BTFSS  F9E.4
071C:  BRA    071A
071E:  MOVWF  FAD
.................... 			delay_ms(1000); 
0720:  MOVLW  04
0722:  MOVWF  2B
0724:  MOVLW  FA
0726:  MOVWF  2C
0728:  RCALL  0022
072A:  DECFSZ 2B,F
072C:  BRA    0724
.................... 		} 
.................... 	} 
072E:  BRA    063C
....................  
.................... 	return 0; 
0730:  MOVLW  00
0732:  MOVWF  01
.................... } 
0734:  SLEEP 

Configuration Fuses:
   Word  1: C600   H4 FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
